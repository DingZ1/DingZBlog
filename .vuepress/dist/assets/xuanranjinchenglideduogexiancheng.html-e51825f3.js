import{_ as p,r as c,o,c as i,a as n,b as a,d as e,e as t}from"./app-3a979dd6.js";const l={},r=t('<h2 id="_0-引子" tabindex="-1"><a class="header-anchor" href="#_0-引子" aria-hidden="true">#</a> 0.引子</h2><p>一个 Tab 页面里的所有执行任务都是在<code>渲染进程(render process)</code>进行的，其中包括：页面渲染、JS 执行、事件循环、异步 Http 请求等。请牢记，<code>浏览器的渲染进程是多线程的</code></p><p>下面来看看主要包含的线程</p><h2 id="_1-gui-渲染线程" tabindex="-1"><a class="header-anchor" href="#_1-gui-渲染线程" aria-hidden="true">#</a> 1.GUI 渲染线程</h2><p>GUI 即 Graphical User Interface，图形用户界面。该线程是由<code>渲染引擎(render engine)</code>驱动的，主要任务如下:</p><ul><li><p>渲染页面，包括解析 HTML、CSS，构建渲染树(render tree)，布局和绘制等</p></li><li><p>执行重排/回流(Layout/Reflow)和重绘(Repaint)</p></li></ul>',6),u={href:"https://blog.csdn.net/Xiaoyc7/article/details/125550420",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>注意：<code>GUI渲染线程与JS引擎线程互斥</code>，JS 引擎线程执行时，GUI 渲染线程会被挂起，GUI 更新会被推入到队列中<code>等JS引擎空闲时</code>后执行</p><h2 id="_2-js-引擎线程" tabindex="-1"><a class="header-anchor" href="#_2-js-引擎线程" aria-hidden="true">#</a> 2.JS 引擎线程</h2><p>顾名思义，就是由<code>JS引擎(javaScript engine)</code>驱动，执行 JS 代码的线程，主要任务如下：</p><ul><li>解析 JS 代码</li><li>执行 JS 代码</li></ul><p>注意：JS 是单线程的，且与 GUI 渲染线程互斥，意味着当 JS 执行过长，可能会造成页面渲染不连贯，会造成堵塞</p><h2 id="_3-事件触发线程" tabindex="-1"><a class="header-anchor" href="#_3-事件触发线程" aria-hidden="true">#</a> 3.事件触发线程</h2><p>JS 是单线程的，不能独立完成异步操作，故事件触发线程用于辅助 JS 引擎实现<code>事件监听异步回调操作</code>，主要任务如下：</p><ul><li>当 JS 引擎执行<code>setTimeout</code>、<code>ajax请求</code>等异步操作时等触发了事件（即拿到了结果后）会将对应回调任务添加到<code>自身维护的任务队列</code>中</li><li>等待 JS 引擎空闲时，会访问事件触发线程中的任务队列，从中取出任务按入队先后顺序执行</li></ul><p>补充：</p><ul><li>异步的宏任务例如 setTimeout、ajax 维护在<code>事件触发线程任务队列</code>中</li><li>微任务维护在<code>JS引擎线程任务队列</code>中</li><li>在执行完同步的宏任务后，会先从 JS 引擎线程的任务队列中拿到微任务逐一执行完毕然后才从事件触发线程中的任务队列取出异步宏任务，故执行顺序永远是<code>宏=&gt;微=&gt;宏</code>，这里的宏和微并非单纯的，可能一个宏任务里面包含了微任务，这个微任务又包含宏任务和下一个微任务</li></ul><h2 id="_4-定时触发器线程" tabindex="-1"><a class="header-anchor" href="#_4-定时触发器线程" aria-hidden="true">#</a> 4.定时触发器线程</h2><p><code>setTimeout</code>和<code>setTnterval</code>所在线程，负责具体的计时任务</p><h2 id="_5-异步-http-请求线程" tabindex="-1"><a class="header-anchor" href="#_5-异步-http-请求线程" aria-hidden="true">#</a> 5.异步 Http 请求线程</h2><p>在 JS 代码中使用 ajax 发送 http 请求时，会开启这个线程，负责具体的 http 请求任务</p><h2 id="_6-js-引擎线程与其他线程的协作-总结" tabindex="-1"><a class="header-anchor" href="#_6-js-引擎线程与其他线程的协作-总结" aria-hidden="true">#</a> 6.JS 引擎线程与其他线程的协作(总结)</h2><p>不多 bb，直接来看代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// setTimeout</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 1.这里代码由js引擎线程执行</span>
<span class="token comment">// 2.计数1000ms这个任务交由定时触发器线程去完成，然后js引擎就暂时不管，执行其他后面的代码</span>
<span class="token comment">// 3.等1000ms后，定时器触发器完成任务，通知事件触发线程将回调\` ()=&gt;{alert(1)} \`推入到任务</span>
<span class="token comment">// 队列中，待js引擎空闲时取出执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 异步ajax请求</span>
<span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// a</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;https://www.some.com/api&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b</span>

<span class="token comment">// 1.JS引擎线程执行完b开启异步http请求线程，然后暂时不管了，执行后面的代码</span>
<span class="token comment">// 2.当异步http请求线程完成网络请求并返回数据了，会通知事件触发线程将a回调</span>
<span class="token comment">// \` ()=&gt;alert(xhr.responseText) \`推入任务队列，等js引擎空闲了取出执行回调</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下图所示： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a0b22842c5a4890a624ab34f1a381ed~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,20),k={href:"https://segmentfault.com/a/1190000012925872",target:"_blank",rel:"noopener noreferrer"};function h(m,v){const s=c("ExternalLinkIcon");return o(),i("div",null,[r,n("p",null,[a("详情可以参考同专栏的《"),n("a",u,[a("浏览器渲染原理"),e(s)]),a("》")]),d,n("p",null,[n("a",k,[a("从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理"),e(s)])])])}const _=p(l,[["render",h],["__file","xuanranjinchenglideduogexiancheng.html.vue"]]);export{_ as default};
