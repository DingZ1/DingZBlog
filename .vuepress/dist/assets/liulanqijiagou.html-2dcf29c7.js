import{_ as o,r as c,o as t,c as p,a as e,b as n,d as s,e as d}from"./app-3a979dd6.js";const r={},i=d(`<h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1.概述</h2><h4 id="_1-1-cpu-gpu-操作系统-应用程序" tabindex="-1"><a class="header-anchor" href="#_1-1-cpu-gpu-操作系统-应用程序" aria-hidden="true">#</a> 1.1 CPU，GPU，操作系统，应用程序</h4><p>四者关系如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">CPU</span>，<span class="token constant">GPU</span> ⇒ 操作系统 ⇒ 应用程序
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>GPU</code>即<code>Graphics Processing Unit</code>，图像处理器 CPU、GPU 都属于计算机硬件提供<code>汇编语言API</code>供操作系统调度，操作系统又提供<code>高级语言API</code>供应用程序操作</p><h4 id="_1-2-应用程序里的进程、线程" tabindex="-1"><a class="header-anchor" href="#_1-2-应用程序里的进程、线程" aria-hidden="true">#</a> 1.2 应用程序里的进程、线程</h4><p>应用程序(program)由多个<code>进程(process)</code>构成，进程是<code>CPU资源分配的最小单位</code>；单个进程又由多个<code>线程(thread)</code>构成，线程是<code>CPU调度的最小单位</code></p><p>如下图所示：</p><p align="center"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e41fd4522764378975100f55c7aabec~tplv-k3u1fbpfcp-zoom-1.image" width="90%" alt="在这里插入图片描述"></p><p>线程共享 CPU 分配给进程的资源内存空间，可以彼此通信，而同个程序里的进程之间内存地址是相互隔离的，需要通过<code>IPC（Inter Process Communication）</code>进行通信(例如浏览器主进程需要通过<code>RendererHost</code>接口向渲染进程传输数据)</p><p>进程间彼此相互隔离，工作独立，一个进程 GG 了也不会影响其他进程</p><h4 id="_1-3-浏览器架构" tabindex="-1"><a class="header-anchor" href="#_1-3-浏览器架构" aria-hidden="true">#</a> 1.3 浏览器架构</h4><p>浏览器按多个进程分成多个模块，各个模块相互独立，且有着单一职责，又相互联系，浏览器各个模块如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">浏览器模块</span><span class="token punctuation">(</span>Browser<span class="token punctuation">)</span><span class="token operator">:</span> 负责整个浏览器内行为协调，调用各个模块
<span class="token function">渲染模块</span><span class="token punctuation">(</span>Renderer<span class="token punctuation">)</span><span class="token operator">:</span> 负责渲染网页
<span class="token constant">GPU</span><span class="token literal-property property">模块</span><span class="token operator">:</span> 负责绘制页面
<span class="token function">网络模块</span><span class="token punctuation">(</span>Network<span class="token punctuation">)</span><span class="token operator">:</span> 负责网络请求
<span class="token function">存储模块</span><span class="token punctuation">(</span>Storage<span class="token punctuation">)</span><span class="token operator">:</span> 负责本地存储

<span class="token function">用户界面模块</span><span class="token punctuation">(</span><span class="token constant">UI</span><span class="token punctuation">)</span><span class="token operator">:</span> 负责浏览器提供给用户的界面模块
<span class="token function">设备模块</span><span class="token punctuation">(</span>Device<span class="token punctuation">)</span><span class="token operator">:</span> 负责与各种本地设备交互
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Chrome 浏览器里点击左上角的<code>三个点按钮</code>⇒ <code>更多工具</code>⇒ <code>任务管理器</code>，可以看到浏览器里运行的各个进程</p><p align="center"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5dd421d31be947d990820b04a3e20a72~tplv-k3u1fbpfcp-zoom-1.image" width="90%" alt="在这里插入图片描述"></p><p>补充：</p><p>1.每个页面会在单个渲染进程中运行，js 是这个渲染进程中的一个单线程</p><p>2.Chrome 浏览器在 web 是多进程，在移动设备由于内存资源有限会采用单进程</p><h4 id="_1-4-站点隔离" tabindex="-1"><a class="header-anchor" href="#_1-4-站点隔离" aria-hidden="true">#</a> 1.4 站点隔离</h4><p><code>站点隔离</code>是将不同站点各自运行在独立的进程里，不许通信，实现<code>沙盒隔离</code>，从而阻碍了 iframe 绕过同源策略进行安全攻击的可能，因为同个进程站点之间可以进行数据通信</p><h2 id="_2-导航功能" tabindex="-1"><a class="header-anchor" href="#_2-导航功能" aria-hidden="true">#</a> 2.导航功能</h2><p>在开始介绍浏览器的导航功能之前，先抛出一个经典问题：<code>从输入一个url到显示一个页面，浏览器背后发生了些什么？</code> 这个问题的背后其实涉及到了浏览器的很多个进程之间的通信，下面来逐个过一过这些模块</p><h4 id="_2-1-ui-线程" tabindex="-1"><a class="header-anchor" href="#_2-1-ui-线程" aria-hidden="true">#</a> 2.1 UI 线程</h4><p><code>ui线程</code>是<code>浏览器进程</code>中的一个线程，负责浏览器 UI 展示和用户交互。用户在导航搜索栏输入时，会通过 ui 线程解析校验输入的 url，在用户敲击回车后，ui 线程控制网页 tab 栏开启 loading 动画，通知<code>网络进程</code>发送请求</p><h4 id="_2-2-网络线程" tabindex="-1"><a class="header-anchor" href="#_2-2-网络线程" aria-hidden="true">#</a> 2.2 网络线程</h4><p><code>网络线程</code>在拿到 url 后就会启动服务，<code>DNS寻址</code>后通过一系列网络协议与服务器建立安全链接，在收到响应后，检查请求头<code>header</code>里的<code>content-type</code>字段发现是 html 类型数据，然后由浏览器进程通过<code>RendererHost</code>接口将数据传输给<code>渲染进程</code>作处理</p><p>补充：</p><p>1.为提高效率，UI 线程在通知网络线程发送请求的同时也会实例化一个<code>渲染进程</code>等着</p><p>2.若<code>content-type</code>为<code>zip</code>或者其他类型文件，会将数据交由<code>下载管理器进程</code>处理</p><h4 id="_2-3-渲染进程" tabindex="-1"><a class="header-anchor" href="#_2-3-渲染进程" aria-hidden="true">#</a> 2.3 渲染进程</h4><p><code>渲染进程</code>在接收到<code>html</code>数据后，就会解析 html 文件，开始渲染页面（具体渲染过程这里不展开），在完成渲染后，通过<code>IPC</code>告知浏览器进程里的<code>ui线程</code>停止 tab 栏的 loading 动画</p><p>流程图如下:</p><p align="center"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ef9571f767c40eba250458042b843fb~tplv-k3u1fbpfcp-zoom-1.image" width="90%" alt="在这里插入图片描述"></p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,35),l={href:"https://cloud.tencent.com/developer/article/1806716",target:"_blank",rel:"noopener noreferrer"},u={href:"https://juejin.cn/post/7035791817803038728",target:"_blank",rel:"noopener noreferrer"},h={href:"https://segmentfault.com/a/1190000012925872",target:"_blank",rel:"noopener noreferrer"};function m(f,b){const a=c("ExternalLinkIcon");return t(),p("div",null,[i,e("p",null,[e("a",l,[n("1.现代浏览器内部机制 Part 1 | 多进程架构"),s(a)])]),e("p",null,[e("a",u,[n("2.精读《深入了解现代浏览器一》"),s(a)])]),e("p",null,[e("a",h,[n("3.从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理"),s(a)])])])}const _=o(r,[["render",m],["__file","liulanqijiagou.html.vue"]]);export{_ as default};
