import{_ as o,r as c,o as t,c as p,a as e,b as n,d as s,e as d}from"./app-3a979dd6.js";const i={},l=e("h2",{id:"_0-写在最开头",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_0-写在最开头","aria-hidden":"true"},"#"),n(" 0.写在最开头")],-1),r={href:"https://web.dev/howbrowserswork/",target:"_blank",rel:"noopener noreferrer"},u=d(`<p>另外，如有写的不对的地方欢迎大佬评论区批评指正，那么让我们开始吧~</p><h2 id="_1-浏览器构成" tabindex="-1"><a class="header-anchor" href="#_1-浏览器构成" aria-hidden="true">#</a> 1.浏览器构成</h2><p>浏览器构成的主要组件有：用户界面、浏览器引擎、<code>渲染引擎</code>、网络、UI 后端、JS 解释器、数据存储 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/945f5f1e376a4bf3bb78a5db35f5c55b~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><h2 id="_2-rendering-engine" tabindex="-1"><a class="header-anchor" href="#_2-rendering-engine" aria-hidden="true">#</a> 2.Rendering engine</h2><p><code>渲染引擎(rendering engine)</code>主要将请求到的文件内容渲染成为页面，不同浏览器渲染引擎不同：</p><ul><li><p>Firefox：<code>Gecko</code></p></li><li><p>Safari：<code>WebKit</code>（开源）</p></li><li><p>Chrome：<code>Blink</code>（WebKit 的一个分支）</p></li><li><p>IE：Trident</p></li></ul><p>另外，渲染进程是<code>多线程</code>的，html、css 解析、js 脚本执行、重排重绘、事件循环都在这个进程中执行</p><h2 id="_3-render-engine-解析流程" tabindex="-1"><a class="header-anchor" href="#_3-render-engine-解析流程" aria-hidden="true">#</a> 3.Render engine 解析流程</h2><p>这里主要介绍<code>Webkit引擎</code>，下面这个渲染流程图建议牢牢记好，全文将会围绕这个展开：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ada77adbaf064216b90b503489a676eb~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><ol><li>HTML 解析器将 html 文件解析成<code>DOM Tree</code>，CSS 解析器将 css 文件解析成<code>Style Rules</code></li><li>将 DOM Tree 和 Style Rules 进行<code>Attachment</code>（连结）生成<code>Render Tree</code></li><li><code>Render Tree</code>由多个带有视觉属性（尺寸、样式）的矩形构成，需要逐个计算大小、位置，然后<code>Layout</code>（即布局，重新 Layout 即<code>重排</code>）</li><li>最后<code>Painting</code>，绘制页面完成后展示</li></ol><p><code>Gecko引擎</code>渲染流程如下: <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e6c8fa26e364ae985ccc09d1ec7c877~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><p>对比 WebKit 基本流程是一样的，只是一些术语不同：</p><p><code>Frame Tree</code> == <code>Render Tree</code></p><p><code>Reflow</code> == <code>Layout</code>（回流和重排是一个意思）</p><p><code>Content Model</code> == <code>DOM Tree</code></p><p><code>Frame Constructor</code> == <code>Attachment</code></p><h2 id="_4-parsing" tabindex="-1"><a class="header-anchor" href="#_4-parsing" aria-hidden="true">#</a> 4.Parsing</h2><p><code>解析</code>是渲染引擎中一个重要的工作，可以将文档结构转化为代码可以使用的结构。（注意：这里介绍的是引擎通用的解析过程而非只针对于渲染引擎）</p><p>通用解析分为两个过程：<code>词法分析(Lexical)</code>和<code>语法分析(Syntax)</code>。首先<code>词法分析</code>将文档内容转化为可识别标志，之后通过<code>语法分析</code>构建<code>解析树(Parse Tree)</code>，流程如下: <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a33162ca6b664ebcb2282a5c910c147a~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><p>解析的最终结果会得到<code>Parse Tree</code>，然后会通过<code>编译</code>转化成机器能识别的<code>机器码</code></p><h2 id="_5-html-解析器" tabindex="-1"><a class="header-anchor" href="#_5-html-解析器" aria-hidden="true">#</a> 5.HTML 解析器</h2><p>渲染引擎里的 HTML 解析器可将 HTML 文档解析为解析树（对 HTML 来说得到的解析树就是<code>DOM Tree</code>），其中遵循的<code>词法分析</code>和<code>语法分析</code>规范由 W3C 制定。</p><p>HTML 结构如下:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example.png<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析成 DOM Tree 结构如下: <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d557a7805a04f17afc6bab1bcef85c3~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><h3 id="_5-1-解析算法" tabindex="-1"><a class="header-anchor" href="#_5-1-解析算法" aria-hidden="true">#</a> 5.1 解析算法</h3><p>HTML 解析算法包括两个阶段：<code>标记化(tokenization)</code>和<code>树构建(tree construction)</code></p><ol><li><p>标记化对应解析过程中的<code>词法分析</code>，<code>标记器(tokenizer)</code>根据<code>词法规范</code>会将 HTML 代码解析为一个个<code>标记(tokens)</code>，包括<code>开始标记</code>、<code>结束标记</code>、<code>属性名称</code>、<code>属性值</code>。之后标记器每解析出一个标记就会交给<code>树构建器</code>，然后又开始准备下一轮解析</p></li><li><p>树构建对应解析过程中的<code>语法分析</code>，接收来自标记器的一个个标记，将其解析为一个个<code>DOM</code>，根据<code>语法规范</code>动态插入，最终构建生成<code>DOM Tree</code><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1d3810f916048268a797d70c3cbcef3~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p></li></ol><h2 id="_6-css-解析器" tabindex="-1"><a class="header-anchor" href="#_6-css-解析器" aria-hidden="true">#</a> 6.CSS 解析器</h2><p>CSS 解析器与 HTML 解析过程类似，通过<code>词法分析</code>识别<code>css选择器标识符</code>、<code>样式属性标识符</code>以及<code>样式属性值</code>等，再通过<code>语法分析</code>阶段解析得到<code>Style Rules</code>即解析的最终结果<code>Parse Tree</code></p><p>拿 Webkit 引擎里的 CSS 解析器作说明：它会将每个 css 文件解析为一个<code>StyleSheet(样式表)</code>对象，内部由一个个<code>CSSRule(css规则)</code>对象构成，而<code>CSSRule</code>内部由两个对象<code>Selections(选择器)</code>和<code>Declaration(声明)</code>构成</p><p>例如这一段 css 代码</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p,
div</span> <span class="token punctuation">{</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.error</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终解析得到的<code>Style Rules</code>树为: <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5e9f48f3f954276b924cea859466f27~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><h2 id="_7-render-tree-的构建" tabindex="-1"><a class="header-anchor" href="#_7-render-tree-的构建" aria-hidden="true">#</a> 7.Render Tree 的构建</h2><h3 id="_7-1-render-tree-构建过程" tabindex="-1"><a class="header-anchor" href="#_7-1-render-tree-构建过程" aria-hidden="true">#</a> 7.1 Render Tree 构建过程</h3><p>经过 HTML 解析和 CSS 解析生成了<code>DOM Tree</code>和<code>Style RUles</code>树之后，将两者<code>Attach</code>最终会构建生成<code>Render Tree</code>，如下图所示 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e4c9fe8ff464258bf0c5f224a881e4a~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><p><code>Render Tree</code>里的每个节点为<code>RenderObject</code>，其外在表现为一个矩形框，几何信息包含宽高、位置、样式、z-index 等。</p><p><code>RenderObject</code>分为很多种类型，由<code>display</code>属性决定，从创建<code>RenderObject</code>的 webkit 代码可以看出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>RenderObject<span class="token operator">*</span> RenderObject<span class="token operator">:</span><span class="token operator">:</span><span class="token function">createObject</span><span class="token punctuation">(</span><span class="token parameter">Node<span class="token operator">*</span> node<span class="token punctuation">,</span> RenderStyle<span class="token operator">*</span> style</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Document<span class="token operator">*</span> doc <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  RenderArena<span class="token operator">*</span> arena <span class="token operator">=</span> doc<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">renderArena</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
  RenderObject<span class="token operator">*</span> o <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>style<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断其display类型</span>
    <span class="token keyword">case</span> <span class="token constant">NONE</span><span class="token operator">:</span> <span class="token comment">// display:none，不会创建renderObject，意味着将该节点不会插入到文档中</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 题外话：回答display:none和visibility:hidden的区别时可以扯一下这个
     * 在display为none时，元素在构建渲染树这一环节已经被gank掉了（不会生成renderObject），
     * 不会参与后续的layout和paint环节
     * 而visibility:hidden，只是将元素设置为视觉不可见，
     * 还是会生成renderObject并参与后续的layout和paint环节）
     */</span>

    <span class="token keyword">case</span> <span class="token constant">INLINE</span><span class="token operator">:</span> <span class="token comment">// inline</span>
      o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>arena<span class="token punctuation">)</span> <span class="token function">RenderInline</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">BLOCK</span><span class="token operator">:</span> <span class="token comment">// block</span>
      o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>arena<span class="token punctuation">)</span> <span class="token function">RenderBlock</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">INLINE_BLOCK</span><span class="token operator">:</span> <span class="token comment">// inline-block</span>
      o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>arena<span class="token punctuation">)</span> <span class="token function">RenderBlock</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">LIST_ITEM</span><span class="token operator">:</span> <span class="token comment">// list-item</span>
      o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>arena<span class="token punctuation">)</span> <span class="token function">RenderListItem</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token operator">...</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> o<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-render-tree-和-dom-tree-的区别" tabindex="-1"><a class="header-anchor" href="#_7-2-render-tree-和-dom-tree-的区别" aria-hidden="true">#</a> 7.2 Render Tree 和 DOM Tree 的区别</h3><p>Render Tree 与 DOM Tree 在结构上并不是一 一对应的:</p><p>1.以下 HTML 元素不会被插入到 Render Tree 中</p><ul><li><p>header</p></li><li><p>meta</p></li><li><p>title</p></li><li><p>display:none</p></li><li><p>... ...</p><p>2.一个 renderObject 对应一个 DOM 节点，但若该节点的开启了<code>float</code>、<code>absolute</code>、<code>fixed</code>等时，会被放置在 Render Tree 的不同位置，不一定是按照 DOM Tree 文档流排列（这就是所谓的<code>脱离文档流</code>）</p></li></ul><h2 id="_8-layout" tabindex="-1"><a class="header-anchor" href="#_8-layout" aria-hidden="true">#</a> 8.Layout</h2><h3 id="_8-1-layout-概述" tabindex="-1"><a class="header-anchor" href="#_8-1-layout-概述" aria-hidden="true">#</a> 8.1 Layout 概述</h3><p>在<code>renderObject</code>被添加到<code>Render Tree</code>时会计算其位置和大小，这个过程就叫<code>布局(Layout)</code>，在 gecko 引擎称之为<code>回流(reflow)</code></p><p>HTML 使用<code>流式布局</code>，即<code>由左到右，由上到下</code>进行布局，这样的布局有个特点是后进入流中的元素不会影响先进入流中的元素；坐标系基于根元素，零点位于左上角</p><p>布局是一个递归过程，从根节点开始逐层递归调用<code>renderObject.layout()</code>计算每个节点的位置和大小信息。layout 方法定义在每个<code>renderObject</code>里，webkit 代码如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">RenderObject</span><span class="token punctuation">{</span>
  virtual <span class="token keyword">void</span> <span class="token function">layout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 布局</span>
  virtual <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span>PaintInfo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绘制</span>
  virtual <span class="token keyword">void</span> rect <span class="token function">repaintRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重绘重排组合</span>
  Node<span class="token operator">*</span> node<span class="token punctuation">;</span>  <span class="token comment">// DOM节点</span>
  RenderStyle<span class="token operator">*</span> style<span class="token punctuation">;</span>  <span class="token comment">// 计算样式</span>
  RenderLayer<span class="token operator">*</span> containgLayer<span class="token punctuation">;</span> <span class="token comment">//the containing z-index layer</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2-dirty-bit-系统" tabindex="-1"><a class="header-anchor" href="#_8-2-dirty-bit-系统" aria-hidden="true">#</a> 8.2 Dirty bit 系统</h3><p><code>Dirty bit</code>即<code>脏位系统</code>。在后期修改了一个节点的位置和大小会重新触发 layout，这种过程叫做<code>重排</code>。</p><p>为了性能考虑，对于局部改变只需局部重排而非整体重排，故渲染引擎引入了<code>Dirty bit system</code>，在需要重排的<code>renderObject</code>及其子元素上标记<code>dirty</code>字段，随后在重排开始时遍历标记为<code>dirty</code>的<code>renderObject</code>，调用其<code>layout</code>方法触发重排</p><h3 id="_8-3-layout-过程" tabindex="-1"><a class="header-anchor" href="#_8-3-layout-过程" aria-hidden="true">#</a> 8.3 Layout 过程</h3><ol><li>父 renderObject 计算其宽高、位置</li><li>遍历子 renderObject，将其在放置于自身容器里，若子 renderObject 的 dirty 标志为 true，调用其 layout 方法重新计算其宽高、位置</li><li>用子级盒子宽高来填充自身宽高</li><li>设置 dirty 标记为 false，表示已经 layout 好了</li></ol><h3 id="_8-4-异步、同步、局部、全局重排" tabindex="-1"><a class="header-anchor" href="#_8-4-异步、同步、局部、全局重排" aria-hidden="true">#</a> 8.4 异步、同步、局部、全局重排</h3><p><code>异步重排</code>：为了避免频繁的重排，通常会采用一个异步的方式，即将多个需要重排的工作先放入一个队列中，待队列满了或者最小时间间隔到了，才会统一触发重排</p><p><code>同步重排</code>：同步意味着立刻重排，修改 DOM 的以下属性会触发</p><ul><li><code>offset</code>：offsetTop、offsetLeft、offsetHeight、offsetWidth</li><li><code>scroll</code>：scrollTop、scrollLeft、scrollHeight、scrollWidth</li><li><code>client</code>：clientTop、clientLeft、clientHeight、clientWidth</li><li>... ...</li></ul><p><code>局部重排</code>：只在局部进行重排，修改 DOM 的大小和位置或者添加、删除、替换 DOM 等操作会影响局部的布局，这些会触发局部重排，修改以下属性会触发：</p><ul><li>width,height,</li><li>margin,padding,</li><li>position</li><li>display:none</li><li>... ...</li></ul><p><code>全局重排</code>：以下情况会触发</p><ul><li>网页初始化时</li><li>全局样式更改，例如字体大小</li><li>屏幕大小调整</li><li>... ...</li></ul><h3 id="_8-5-重排优化" tabindex="-1"><a class="header-anchor" href="#_8-5-重排优化" aria-hidden="true">#</a> 8.5 重排优化</h3><p>重排是一个非常耗性能的工作，应尽量避免，有很多情况可以优化</p><ul><li>修改多个样式时给 DOM 添加 class 名，设置 class 的样式一次性修改</li><li>先把 DOM 的 display 设置 none，修改完后再显示</li><li>向一个父节点添加多个子节点时，先创建<code>documentFragment</code>，将子节点添加到其中，最后再把其一次性插入到父节点</li><li>使用动画的元素会频繁触发重排，为其开启 fixed 或 absolut 使其脱离文档流即可，或者可以的话使用 gif 图代替</li><li>不要使用 table 布局</li><li>... ...</li></ul><h2 id="_9-paint" tabindex="-1"><a class="header-anchor" href="#_9-paint" aria-hidden="true">#</a> 9.Paint</h2><p><code>renderObj</code>经过 Layout 阶段布局完成后，会调用<code>renderObj.paint()</code>开始绘制节点样式</p><h3 id="_9-1-局部绘制" tabindex="-1"><a class="header-anchor" href="#_9-1-局部绘制" aria-hidden="true">#</a> 9.1 局部绘制</h3><p>当某个节点发生改变时，其对应的<code>renderObj</code>会使其在屏幕上的矩形框失效，这就会让操作系统判断其为<code>“脏区”</code>并进行<code>重绘(repaint)</code></p><h3 id="_9-2-绘制顺序" tabindex="-1"><a class="header-anchor" href="#_9-2-绘制顺序" aria-hidden="true">#</a> 9.2 绘制顺序</h3><p>绘制是按照元素的样式堆叠顺序进行的，一个块元素的绘制顺序为：</p><ol><li><p>background-color</p></li><li><p>background-image</p></li><li><p>border</p></li><li><p>children</p></li><li><p>outline</p></li></ol><h3 id="_9-3-重排和重绘的关系" tabindex="-1"><a class="header-anchor" href="#_9-3-重排和重绘的关系" aria-hidden="true">#</a> 9.3 重排和重绘的关系</h3><p>一句话：<code>&quot;重绘不一定重排，重排一定重绘&quot;</code></p><p>如图中所示，改变一个 DOM 的大小、位置或者向一个 DOM 节点进行增删改都会有可能触发 layout 重排，之后一定会 repaint 重绘，但是只修改 DOM 的某些样式，不影响其大小、位置那么就不会触发重排，只用重绘就行。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f72a515da4d843b49cad231c3efd7260~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><h2 id="_10-css2-视觉模型" tabindex="-1"><a class="header-anchor" href="#_10-css2-视觉模型" aria-hidden="true">#</a> 10.CSS2 视觉模型</h2><h3 id="_10-1-css-盒模型" tabindex="-1"><a class="header-anchor" href="#_10-1-css-盒模型" aria-hidden="true">#</a> 10.1 css 盒模型</h3><p>CSS 盒模型将一个元素看作是一个矩形框，框的宽高从外到内由其<code>margin</code>、<code>boder</code>、<code>padding</code>、<code>content</code>构成，如下图: <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f1a87bb6d3f4d4ba013609971561583~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"> 其中，css 属性<code>box-sizing</code>决定了<code>width</code>和<code>height</code>要作用于哪个区域,，默认作用于<code>content区</code>即<code>box-sizing:content-box</code>，还有两个可选值<code>padding-box</code>和<code>border-box</code></p><h3 id="_10-2-定位方案" tabindex="-1"><a class="header-anchor" href="#_10-2-定位方案" aria-hidden="true">#</a> 10.2 定位方案</h3><p>1.定位的方案有三种:</p><p><code>normal</code>：这是默认的定位方案，根据元素框<code>展示类型</code>即(<code>display属性</code>)和尺寸来布局</p><p><code>float</code>：首先像正常文档流布局，然后脱离文档流，尽可能向左或向右浮动</p><p><code>absolute</code>：脱离文档流，按照其他方式布局</p><p>2.盒子的布局方式由这几个因素决定:</p><p>展示类型即<code>display</code></p><p><code>盒子尺寸</code></p><p><code>定位方案</code></p><p><code>屏幕大小</code>等外部因素</p><h3 id="_10-3-盒子展示类型" tabindex="-1"><a class="header-anchor" href="#_10-3-盒子展示类型" aria-hidden="true">#</a> 10.3 盒子展示类型</h3><p>通过<code>display</code>设置盒子的展示类型</p><p><code>block</code>：会形成一个块，在浏览器窗口有一个自己的矩形，且块是在垂直方向一个接一个放置的 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ab7ff9c0d754e2f86e2dc4698cb4dff~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><p><code>inline</code>：没有自己的块，会被包含在块内朝水平方向一个接一个放置 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/083cb4e5fa0f4ebf846d0ee42548c953~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><p>当父元素 content 区域宽度不够时，inline 盒子会被挤下去，其以基线对齐 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc3f98de0193403fb28e0739672c1093~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,96),k={href:"https://web.dev/howbrowserswork/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://coolshell.cn/articles/9666.html",target:"_blank",rel:"noopener noreferrer"};function h(m,f){const a=c("ExternalLinkIcon");return t(),p("div",null,[l,e("p",null,[n("本文主要是阅读"),e("a",r,[n("《how browsers work》"),s(a)]),n("这篇文章时作的学习笔记，同时也加入了自己的理解，从而将篇幅很长很长的原文“精炼”成了这篇文章，但还是推荐大家能耐住性子去看看原文，写的十分的好，虽然花时间比较多，但可以学到很多东西，绝对值得！！！")]),u,e("p",null,[e("a",k,[n("1.how browsers work"),s(a)])]),e("p",null,[e("a",b,[n("2.浏览器的渲染原理简介"),s(a)])])])}const g=o(i,[["render",h],["__file","liulanqixuanranyuanli.html.vue"]]);export{g as default};
