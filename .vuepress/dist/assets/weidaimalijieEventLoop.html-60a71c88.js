import{_ as n,o as s,c as a,e as t}from"./app-3a979dd6.js";const p={},c=t(`<ol><li><code>js主线程</code>执行遇到异步代码将其推入事件触发线程维护的异步回调队列中（分宏微）</li><li>js 主线程执行执行完毕，<code>渲染线程</code>执行重新渲染 dom（包括重排重绘）</li><li>渲染线程执行完毕，执行<code>事件触发线程</code>，将异步回调队列中任务取出依次执行，具体过程为：先清空微任务队列，然后每从宏任务队列中取出一个宏任务执行后又去清空微任务队列，直到宏任务队列为空，又</li><li>返回执行 js 主线程，形成<code>EventLoop</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">runJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> syncStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 同步执行栈</span>
    <span class="token keyword">let</span> asyncMicroQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 异步微任务队列</span>
    <span class="token keyword">let</span> asyncMacroQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 异步宏任务队列</span>

    <span class="token keyword">function</span> <span class="token function">runSyncStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 主线程</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>syncStack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> syncStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空同步执行栈</span>
        <span class="token function">reRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新渲染</span>
        <span class="token function">runAsyncQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从任务队列取出异步任务执行</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">runAsyncQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 任务队列</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>asyncMicroQueue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> asyncMicroQueue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先清空微任务队列</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>asyncMacroQueue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 每执行一个异步宏，就要清空一次微任务队列（因为有可能异步宏会往微任务队列push异步微）</span>
            asyncMacroQueue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>asyncMicroQueue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> asyncMicroQueue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">runSyncStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 回到js主线程</span>
    <span class="token punctuation">}</span>
    <span class="token function">runSyncStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析栈=&gt;同步调用栈--&gt;异步回调队列</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> parseStask <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> syncStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> asyncMicroQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> asyncMacroQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),e=[c];function o(u,i){return s(),a("div",null,e)}const k=n(p,[["render",o],["__file","weidaimalijieEventLoop.html.vue"]]);export{k as default};
