import{_ as p,r as c,o,c as e,a as n,b as a,d as t,e as i}from"./app-3a979dd6.js";const u={},l=i(`<h2 id="_1-堆、栈、队列" tabindex="-1"><a class="header-anchor" href="#_1-堆、栈、队列" aria-hidden="true">#</a> 1.堆、栈、队列</h2><p>堆 Heap：存放<code>引用类型</code></p><p>栈 Stack：<code>后进先出</code>，执行<code>同步</code>任务</p><p>队列 Queue：<code>先进先出</code>，存放<code>异步</code>任务 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c84a7d97e4674547bdaca13a398fc70b~tplv-k3u1fbpfcp-zoom-1.image" width="90%" alt="在这里插入图片描述"></p><h2 id="_2-事件循环" tabindex="-1"><a class="header-anchor" href="#_2-事件循环" aria-hidden="true">#</a> 2.事件循环</h2><p>js 是单线程的，但是执行时会分为<code>同步</code>和<code>异步</code>任务</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05438a699bca413fbfaf48e2946d0629~tplv-k3u1fbpfcp-zoom-1.image" width="90%" alt="在这里插入图片描述"><p>在任务入执行栈时，会将异步任务推入<code>任务队列</code>，同步任务放入主线程中执行，待主线程空了之后再回头去按顺序执行任务队列里的异步任务，如此循环</p><h2 id="_3-宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#_3-宏任务和微任务" aria-hidden="true">#</a> 3.宏任务和微任务</h2><p>除了同步和异步任务，还可以更精细化可分为<code>宏任务</code>和<code>微任务</code>，常见的宏任务和微任务如下:</p><p>宏任务: <code>普通同步代码</code>，<code>setTimeout</code>，<code>setInterval</code>，<code>new promise</code>，<code>异步ajax请求</code></p><p>微任务: <code>promise.then.catch.finally</code>，<code>queueMicrotask</code>，<code>process.nextTick</code>(仅在 node.js 中，且享有优先执行权)</p><p>队列里面有宏任务和微任务，浏览器每次事件循环都会执行一个宏任务，和该宏任务下的所有微任务。遇到定时器等异步任务会放到异步队列等待下一轮循环。这样一直运行，只到执行栈为空和队列为空</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ed07a7449a94a2c9ec3124f8f475c9c~tplv-k3u1fbpfcp-zoom-1.image" width="90%" alt="在这里插入图片描述"><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同步宏</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 异步宏</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 异步微（高优先级）</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 同步宏</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 同步微</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 非node.js环境忽略process.nextTick</span>
process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 异步微，在微任务中最高优先级</span>
    <span class="token comment">// 即所有同步宏任务结束之后立刻执行这个异步微任务，再恢复执行同步剩下的微任务</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 同步宏</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;7&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 同步微</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 异步宏</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;9&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 异步微（高优先级）</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 同步宏</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;11&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 同步微</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// node环境: 1 7 6 8 2 4 9 11 3 10 5 12</span>
<span class="token comment">// 浏览器环境: 1 7 8 2 4 5 9 11 12  process.nextTick仅在node环境有，这里忽略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,16),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop",target:"_blank",rel:"noopener noreferrer"},d={href:"https://juejin.cn/post/6844903512845860872",target:"_blank",rel:"noopener noreferrer"};function r(v,m){const s=c("ExternalLinkIcon");return o(),e("div",null,[l,n("p",null,[n("a",k,[a("1.并发模型与事件循环"),t(s)])]),n("p",null,[n("a",d,[a("2.这一次，彻底弄懂 JS 执行机制"),t(s)])])])}const f=p(u,[["render",r],["__file","shijianxunhuanjizhi.html.vue"]]);export{f as default};
