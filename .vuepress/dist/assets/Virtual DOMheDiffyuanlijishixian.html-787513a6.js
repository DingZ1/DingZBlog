import{_ as t,r as e,o,c,a as n,b as a,d as p,e as l}from"./app-3a979dd6.js";const i={},u=l(`<h2 id="_0-写在开头" tabindex="-1"><a class="header-anchor" href="#_0-写在开头" aria-hidden="true">#</a> 0. 写在开头</h2><p>本文将秉承<strong>Talk is cheap, show me the code</strong>原则，做到文字最精简，一切交由代码说明！</p><h2 id="_1-vdom" tabindex="-1"><a class="header-anchor" href="#_1-vdom" aria-hidden="true">#</a> 1. vdom</h2><p>vdom 即虚拟 DOM，将 DOM 映射为 JS 对象，结合 diff 算法更新 DOM</p><p>以下为 DOM</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>home<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>映射成 VDOM</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;app&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;home&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
          <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
          <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;home&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这个 vdom 实现简单的<code>render</code>函数，可以通过 js 操作修改 dom</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in arr<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ item.name }} : {{ item.id }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>reRender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    app<span class="token punctuation">.</span>innerHtml <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        el<span class="token punctuation">.</span>innerHtml <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        app<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// test</span>
<span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 首次渲染</span>
<span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 修改关联数据</span>
    <span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新渲染：暴力刷新DOM，没有diff，实际上只用更新最后一个div就行</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-使用-snabbdom-实现-vdom" tabindex="-1"><a class="header-anchor" href="#_1-1-使用-snabbdom-实现-vdom" aria-hidden="true">#</a> 1.1 使用 snabbdom 实现 VDOM</h3><p>snabbldom 是简易实现 vdom 功能的库，有两个核心 api：<code>h函数</code>和<code>patch函数</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">h</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建vnode</span>
<span class="token function">patch</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对vnode进行diff后挂载到真实dom上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结合<code>h</code>和<code>patch</code>实现<code>render</code>渲染函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> vnode<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> newVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
        <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;wrap&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">patch</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vnode <span class="token operator">=</span> newVnode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 首次渲染</span>

<span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 修改关联数据</span>
    <span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新渲染：在patch函数里经过vdom的diff后再挂载到真实dom，这里只更新最后一个div</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-diff" tabindex="-1"><a class="header-anchor" href="#_2-diff" aria-hidden="true">#</a> 2. Diff</h2><p>为了尽量减少 DOM 操作，需要通过 diff 对比新旧 vnode，针对更改的地方进行更新 DOM，而非替换整个 DOM</p><p>大体思路为：</p><ol start="0"><li>对新旧两个节点调用<code>patch</code>函数</li><li>进来先判断两个节点是否为同一类型，具体是对比<code>key</code>、<code>tag</code>、<code>data</code>等属性</li><li>若不为同一类型，那么基于新节点创建 dom 之后作替换</li><li>若为同一类型，那么调用<code>patchVnode</code>函数</li><li>进来先判断两个节点是文本节点的话，那么就作文本内容替换</li><li>否则判断是否都有子节点，都有的话调用<code>updateChildren</code>函数，通过<code>首尾四个指针</code>对子节点数组进行 diff 更新；若旧节点有子节点，新节点没有，这时就删除子节点；若旧节点无子节点，新节点有，这时基于新节点创建 dom 作替换即可</li></ol><p>通过<code>createElment</code>函数，将 VDOM 转为真实 DOM</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文本节点</span>

    <span class="token keyword">let</span> <span class="token punctuation">{</span> tag<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> vnode<span class="token punctuation">;</span>

    <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tag</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// attrs</span>
        el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> attrs<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">childVnode</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// children</span>
        el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>childVnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> el<span class="token punctuation">;</span>
    <span class="token keyword">return</span> el<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>patch</code>函数，执行 diff 更新操作</p><p>判断<code>vnode</code>和<code>newVnode</code>是否为同一类型节点，是则继续递归对比子节点，否则直接替换</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">patchVnode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token function">replaceVnode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">replaceVnode</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> el <span class="token operator">=</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">;</span> <span class="token comment">// 旧节点</span>
    <span class="token keyword">let</span> parentEl <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">getParentNode</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取父节点</span>
    api<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentEl<span class="token punctuation">,</span> <span class="token function">createElement</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">)</span><span class="token punctuation">,</span> api<span class="token punctuation">.</span><span class="token function">getNextSibling</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入新节点</span>
    api<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>parentEl<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除旧节点</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isSameNode</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        vnode<span class="token punctuation">.</span>key <span class="token operator">==</span> newVnode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> <span class="token comment">// key是否相同</span>
        vnode<span class="token punctuation">.</span>tag <span class="token operator">==</span> newVnode<span class="token punctuation">.</span>tag <span class="token operator">&amp;&amp;</span> <span class="token comment">// tag是否相同</span>
        <span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">isDef</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment">// 是否都定义了data</span>
        <span class="token comment">// &amp;&amp;... 其他条件</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">patchVnode</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>el <span class="token operator">=</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前旧节点对应的dom，并赋值给新节点的el</span>

    <span class="token comment">// 1.都为文本节点，且文本不一样</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text <span class="token operator">&amp;&amp;</span> newVnode<span class="token punctuation">.</span>text <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>text <span class="token operator">!=</span> newVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        <span class="token keyword">return</span> api<span class="token punctuation">.</span><span class="token function">setElText</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> newVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 替换文本</span>

    <span class="token keyword">let</span> ch <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
    <span class="token keyword">let</span> newCh <span class="token operator">=</span> newVnode<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&amp;&amp;</span> newCh<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> newCh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2.都有子节点，递归对比</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token keyword">return</span> api<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.vnode有子节点，newVnode无，删除子节点</span>
    <span class="token keyword">return</span> <span class="token function">replaceVnode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4. newNode有子节点，vnode无，替换即可</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>updateChildren</code>实现比较复杂，使用<code>首尾四指针</code>进行<code>vnode</code>和<code>newVnode</code>的对比</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> newCh</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 子节点下标</span>
    <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> r <span class="token operator">=</span> ch<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> newL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> newR <span class="token operator">=</span> newCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">// 子节点</span>
    <span class="token keyword">let</span> lNode <span class="token operator">=</span> ch<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> rNode <span class="token operator">=</span> ch<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> newLNode <span class="token operator">=</span> newCh<span class="token punctuation">[</span>newL<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> newRNode <span class="token operator">=</span> newCh<span class="token punctuation">[</span>newR<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r <span class="token operator">&amp;&amp;</span> newL <span class="token operator">&lt;=</span> newR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lNode <span class="token operator">||</span> <span class="token operator">!</span>rNode <span class="token operator">||</span> <span class="token operator">!</span>newLNode <span class="token operator">||</span> <span class="token operator">!</span>newRNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 边界处理</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lNode<span class="token punctuation">)</span> lNode <span class="token operator">=</span> ch<span class="token punctuation">[</span><span class="token operator">++</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rNode<span class="token punctuation">)</span> rNode <span class="token operator">=</span> ch<span class="token punctuation">[</span><span class="token operator">--</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newLNode<span class="token punctuation">)</span> newLNode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newL<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newRNode<span class="token punctuation">)</span> newRNode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newR<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 新旧子节点首尾指针对比 l*newL、r*newR、l*newR、r*newL</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameNode</span><span class="token punctuation">(</span>lNode<span class="token punctuation">,</span> newLNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patchVnode</span><span class="token punctuation">(</span>lNode<span class="token punctuation">,</span> newLNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            lNode <span class="token operator">=</span> ch<span class="token punctuation">[</span><span class="token operator">++</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
            newLNode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newL<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameNode</span><span class="token punctuation">(</span>rNode<span class="token punctuation">,</span> newRNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patchVnode</span><span class="token punctuation">(</span>rNode<span class="token punctuation">,</span> newRNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rNode <span class="token operator">=</span> ch<span class="token punctuation">[</span><span class="token operator">--</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>
            newRNode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newR<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameNode</span><span class="token punctuation">(</span>lNode<span class="token punctuation">,</span> newRNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patchVnode</span><span class="token punctuation">(</span>lNode<span class="token punctuation">,</span> newRNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            api<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> lNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> api<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>rNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lNode <span class="token operator">=</span> ch<span class="token punctuation">[</span><span class="token operator">++</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
            newRNode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newR<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameNode</span><span class="token punctuation">(</span>rNode<span class="token punctuation">,</span> newLNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patchVnode</span><span class="token punctuation">(</span>rNode<span class="token punctuation">,</span> newLNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            api<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> rNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> lNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rNode <span class="token operator">=</span> ch<span class="token punctuation">[</span><span class="token operator">--</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>
            newLNode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newL<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 在vnode未知序列区间[l,r]生成key-idx的map表，用newLNode的key在未知序列中找到可复用的位置</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyIdxMap<span class="token punctuation">)</span> keyIdxMap <span class="token operator">=</span> <span class="token function">getKeyIdxMap</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// map</span>

        keyIdx <span class="token operator">=</span> keyIdxMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>newLNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            api<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token function">createElement</span><span class="token punctuation">(</span>newLNode<span class="token punctuation">)</span><span class="token punctuation">,</span> lNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> nodeToMove <span class="token operator">=</span> ch<span class="token punctuation">[</span>keyIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">patchVnode</span><span class="token punctuation">(</span>nodeToMove<span class="token punctuation">,</span> newLNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            api<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> nodeToMove<span class="token punctuation">.</span>el<span class="token punctuation">,</span> lNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        newLNode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newL<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getKeyIdxMap</span><span class="token punctuation">(</span><span class="token parameter">ch<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,28),k=n("li",null,"Vue2 源码",-1),r={href:"https://juejin.cn/post/6994959998283907102",target:"_blank",rel:"noopener noreferrer"},d={href:"https://juejin.cn/post/7094540782517878820#heading-5",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const s=e("ExternalLinkIcon");return o(),c("div",null,[u,n("ol",null,[k,n("li",null,[n("a",r,[a("15 张图，20 分钟吃透 Diff 算法核心原理"),p(s)])]),n("li",null,[n("a",d,[a("Vue2 的 diff 算法--updateChildren 图文流程以及缺点"),p(s)])])])])}const f=t(i,[["render",v],["__file","Virtual DOMheDiffyuanlijishixian.html.vue"]]);export{f as default};
