import{_ as n,o as s,c as a,e as t}from"./app-3a979dd6.js";const p={},e=t(`<p>ES6 对 String 类型作了一些扩展，本文主要介绍最重要的两个</p><h2 id="_1-模板字符串" tabindex="-1"><a class="header-anchor" href="#_1-模板字符串" aria-hidden="true">#</a> 1. 模板字符串</h2><p>ES6 引入了模板字符串<code>\${exp}</code>，可以在<code>{}</code>里面插入变量，从而避免了字符串的繁杂操作。</p><p>没有模板字符串之前，一些功能写起来很机车：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> profile <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;profile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;定子&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token string">&#39;这个人除了帅，一无是处&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
profile<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt;&#39;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;&lt;/h1&gt;&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;&lt;p&gt;&#39;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>info <span class="token operator">+</span> <span class="token string">&#39;&lt;/p&gt;&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在引入模板字符串,明显舒适多了~</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>profile<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  &lt;h1&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;/h1&gt;
  &lt;p&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token punctuation">.</span>info<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;/p&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在模板中也可以调用函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getCoolGuy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;定子&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">彭于晏 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getCoolGuy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 吴彦祖</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> <span class="token comment">// 彭于晏 定子 吴彦祖</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以花式调用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">getFriends</span> <span class="token operator">=</span> <span class="token parameter">friends</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;ul&gt;
  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>friends
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
          <span class="token parameter">friend</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
       &lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>friend<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
       &lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>friend<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
     </span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
&lt;/ul&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> profile <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;profile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
profile<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">getFriends</span><span class="token punctuation">(</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-扩展方法" tabindex="-1"><a class="header-anchor" href="#_2-扩展方法" aria-hidden="true">#</a> 2. 扩展方法</h2><p>ES6 对 String 的原型上进行了方法扩展，以下是常用的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">includes</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从index开始检测是否含有str字符串，index默认为0</span>
<span class="token function">replaceAll</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> newStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将子字符串str全部替换为newStr,等价于: replace(/str/g, newStr)，这里用了正则</span>

<span class="token function">fromCharCode</span><span class="token punctuation">(</span>unicode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将unicode码点返回对应字符</span>
<span class="token function">startsWith</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从index开始检测是否以str字符串开头</span>
<span class="token function">endsWith</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 你猜猜~</span>

<span class="token function">repeat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将字符串重复n遍并返回</span>
<span class="token function">padStart</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">padLeft</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检测字符串是否满足len长度，若不满足在其前方用子字符串str补全</span>
<span class="token function">padEnd</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">padRight</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 你懂的~</span>

<span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去除前后空格</span>
<span class="token function">trimLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 你猜猜~</span>
<span class="token function">trimRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 你猜猜~</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","3.Stringkuozhan.html.vue"]]);export{r as default};
