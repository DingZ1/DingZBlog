import{_ as e,r as t,o as p,c as o,a as n,b as c,d as i,e as s}from"./app-3a979dd6.js";const l={},u=s(`<blockquote><p>“了解一个东西是如何运作的才能使你成为好的开发者” —————— 写在最开头</p></blockquote><h1 id="ecmascript" tabindex="-1"><a class="header-anchor" href="#ecmascript" aria-hidden="true">#</a> ECMAScript</h1><h2 id="_0-ecma-262-规定" tabindex="-1"><a class="header-anchor" href="#_0-ecma-262-规定" aria-hidden="true">#</a> 0.ECMA-262 规定：</h2><ol><li>对象与平台无关</li><li>删除与浏览器相关的代码</li><li>全面支持 Unicode 编码</li></ol><h2 id="_1-表达式" tabindex="-1"><a class="header-anchor" href="#_1-表达式" aria-hidden="true">#</a> 1. 表达式</h2><h3 id="_1-1-表达式包括-常量、变量、直接量、关键字" tabindex="-1"><a class="header-anchor" href="#_1-1-表达式包括-常量、变量、直接量、关键字" aria-hidden="true">#</a> 1.1 表达式包括：常量、变量、直接量、关键字</h3><p>① 原始表达式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>② 初始化表达式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jack&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 函数定义表达式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④ 函数调用表达式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会计算 MemberExpression 并返回Reference</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑤ 对象创建表达式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑥ 属性访问表达式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span> <span class="token string">&#39;key&#39;</span> <span class="token punctuation">]</span>  传入数值时会转化为字符串
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-补充" tabindex="-1"><a class="header-anchor" href="#_1-2-补充" aria-hidden="true">#</a> 1.2 补充</h3><ol><li><p>JS 解析器遇到 <code>.</code>和 <code>[&#39;key&#39;]</code> 时的操作</p><blockquote><p>① 先判断变量是否为<code>null</code>和<code>undefined</code>，是则报错<br> ② 判断是否为对象<code>(A instanceof Object)</code>， 是则执行访问对应属性或方法的操作<br> ③ 若不为对象，对简单数据类型调用相应的<code>转型函数</code>，之后再对这个临时包装对象执行后续操作（此时的包装对象是临时在内存中创建的，与原先的变量并无引用关系，故在执行后续操作完毕之后立即被垃圾收集器收集处理)</p></blockquote></li><li><p>使用<code>[ &#39;key&#39; ]</code>的方式访问对象属性的两大好处：</p><blockquote><p>① 可通过变量来访问<br> ② 若属性名包含非法字符不可以用<code>.</code>的方式来访问，必须使用<code>[ &#39;key&#39; ]</code></p></blockquote></li></ol><h2 id="_2-运算符" tabindex="-1"><a class="header-anchor" href="#_2-运算符" aria-hidden="true">#</a> 2. 运算符</h2><h3 id="_2-1-运算符一些特性" tabindex="-1"><a class="header-anchor" href="#_2-1-运算符一些特性" aria-hidden="true">#</a> 2.1 运算符一些特性</h3><p>① 优先级：<code>()</code> =&gt;<code>属性访问</code> =&gt; <code>一元操作符(++ --)</code> =&gt; <code>+、-、*、/</code> =&gt; <code>比较运算符</code> =&gt; <code>位运算(~、&amp;、|、&gt;&gt;)</code> =&gt; <code>三元操作符</code> =&gt; <code>赋值</code></p><p>② 结合性：只有<code>一元操作符</code>、<code>三元操作符</code>、<code>赋值</code>是右结合，其他均为左结合</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token operator">++</span>a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// false,      一元 &gt; 比较元素符</span>

<span class="token operator">!</span>a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 具体过程:undefined++ ——&gt; NaN +1 ——&gt; NaN ——&gt; !NaN ——&gt;true     一元操作符右结合</span>

<span class="token constant">X</span> <span class="token operator">=</span> a <span class="token operator">?</span> b <span class="token operator">:</span> c <span class="token operator">?</span> d <span class="token operator">:</span> e <span class="token operator">?</span> f <span class="token operator">:</span> g<span class="token punctuation">;</span>
<span class="token comment">// 相当于：X = a ? b : ( c ? d : ( e ? f : g ))     三元操作符右结合</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>
<span class="token comment">// 相当于：b = 1 + 3 = 4   最终a = 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-位运算符" tabindex="-1"><a class="header-anchor" href="#_2-2-位运算符" aria-hidden="true">#</a> 2.2 位运算符</h3><p>按位与 <code>&amp;</code>：同一留一， 二进制乘</p><p>按位或 <code>|</code>：有一留一， 二进制加</p><p>按位异或 <code>^</code>：不同留一， 二进制减</p><p>按位非 <code>~</code>：取负减一</p><p>左移 <code>&lt;&lt;</code>：二进制左移 n 位，即乘 2^n</p><p>右移 <code>&gt;&gt;</code>：二进制右移 n 位，即除以 2^n</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// &amp;1作奇偶判断</span>
<span class="token number">2</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token number">3</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token comment">// |0 向0取整</span>
<span class="token number">1.5</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token number">2.2</span> <span class="token operator">|</span>
    <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">-</span> <span class="token comment">// 2</span>
        <span class="token number">1.5</span><span class="token punctuation">)</span> <span class="token operator">|</span>
    <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>

<span class="token comment">// &gt;&gt;1 取中间数</span>
<span class="token number">3</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token number">2</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-逻辑与-、逻辑或-的三层理解" tabindex="-1"><a class="header-anchor" href="#_2-3-逻辑与-、逻辑或-的三层理解" aria-hidden="true">#</a> 2.3 逻辑与&amp;&amp;、逻辑或||的三层理解</h3><ol><li>逻辑与 &amp;&amp; <blockquote><p>① 对两个布尔值进行运算<br> ② 对两个判断进行运算<br> ③ 第一个操作数为 true 执行或返回第二个表达式（串联开关）</p></blockquote></li><li>逻辑或 || <blockquote><p>① 对两个布尔值进行运算<br> ② 对两个判断进行运算<br> ③ 第一个操作数为 false 执行或返回第二个表达式（并联开关）</p></blockquote></li></ol><h2 id="_3-语句" tabindex="-1"><a class="header-anchor" href="#_3-语句" aria-hidden="true">#</a> 3. 语句</h2><p>① 表达式语句</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> property<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 复合语句</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token comment">// 结尾无须加&#39; ; &#39; 加了代表空语句</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 声明语句</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span>、<span class="token keyword">let</span>、<span class="token keyword">const</span>、<span class="token keyword">function</span> <span class="token comment">// 不可delete，因为声明的是变量而非属性)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④ 流程控制语句</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span>
<span class="token keyword">while</span>
<span class="token keyword">do</span><span class="token operator">-</span><span class="token keyword">while</span>
<span class="token keyword">switch</span><span class="token operator">-</span><span class="token keyword">case</span>
<span class="token keyword">for</span>
<span class="token keyword">for</span><span class="token operator">-</span><span class="token keyword">in</span>
<span class="token keyword">for</span><span class="token operator">-</span><span class="token keyword">of</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-boolean" tabindex="-1"><a class="header-anchor" href="#_4-boolean" aria-hidden="true">#</a> 4. Boolean</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">Boolean</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token punctuation">[</span>PrimitiveValue<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token operator">/</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">__proto___</span><span class="token operator">:</span> Boolean
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在带有判断条件的语句中，对<code>非布尔类型</code>变量会尝试调用<code>Boolean()</code>方法，对六个特殊值会返回 false：<code>&quot;&quot;、0、-0、NaN、null、undefined</code>，其余均返回 true 包括：<code>[]、{}、function(){ }、&#39;0&#39;、&#39;false&#39;</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">坑</span><span class="token operator">:</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-number" tabindex="-1"><a class="header-anchor" href="#_5-number" aria-hidden="true">#</a> 5. Number</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">Number</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token punctuation">[</span>PrimitiveValue<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> 数值<span class="token punctuation">,</span>
  <span class="token literal-property property">__proto__</span><span class="token operator">:</span> Number
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运算操作符<code>+、-、*、/、%</code>等会对<code>非number类型</code>尝试调用<code>valueOf()</code>方法（字符串拼接除外），对于三个特殊值会返回 0：<code>&quot;&quot;、null、false</code>，对象先调用<code>valueOf()</code>，若 NaN，再调用<code>toString()</code></p><p>特别的，NaN 是特殊的数值，但不等于任何值包括自身</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token number">NaN</span> <span class="token operator">==</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用于判断A是否是数值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-1-常用方法" tabindex="-1"><a class="header-anchor" href="#_5-1-常用方法" aria-hidden="true">#</a> 5.1 常用方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">toFixed</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//保留n位小数</span>
<span class="token function">toPrecision</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保留n位数，科学计数法  99.toPrecision(1) = 1e+2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-string" tabindex="-1"><a class="header-anchor" href="#_6-string" aria-hidden="true">#</a> 6. String</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">String</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token punctuation">[</span>PrimitiveValue<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;0&#39;</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;1&#39;</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;2&#39;</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token literal-property property">__proto__</span><span class="token operator">:</span> String
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串由零或多个 16 位 Unicode 字符组成</p><p>转义序列：如&amp;nbsp，尽管本身由多个字符构成，但参与字符串长度计算时为 1</p><p>简单数据类型在调用方法时，其本身并无任何方法，变量保存的仅为一个字面量，故会进行类型包装后再调用相应方法操作并返回，但变量本身并不会改变</p><blockquote><p>具体过程: 创建包装对象 —— 调用方法并返回 —— 销毁临时对象</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 无效</span>
<span class="token function">alert</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ABC</span>
<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abc</span>
<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-1-常用方法" tabindex="-1"><a class="header-anchor" href="#_6-1-常用方法" aria-hidden="true">#</a> 6.1 常用方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回字符串指定索引处的字符，相当于[index]</span>
<span class="token function">charCodeAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回字符串指定索引处的字符所对应的字符编码</span>
<span class="token function">concat</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拼接字符串，相当于”+”</span>
<span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> startIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从startIndex（默认为0）开始向后查找首个匹配”value”的索引并返回</span>
<span class="token function">lastIndexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从后向前查找</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 大小写转化</span>
<span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、toLocaleUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除前后置所有空格，还分trimLeft()和trimRight()</span>
<span class="token function">split</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对字符串进行分隔，并放入数组中，以a作为标志分隔符，默认为&#39; &#39;</span>
<span class="token function">join</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将数组元素拼接成字符串，以a作为分隔符，默认为&#39;,&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ☆截取字符串操作</span>
<span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 截取[start,end)区间的字符串  数组也是使用这个方法来截取数组元素</span>
<span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 截取[start,end)区间的字符串</span>
<span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从start开始截取num个字符串</span>
<span class="token comment">// slice: start和end为负时代表倒数</span>
<span class="token comment">// substring: start和end为负代表0（有反转操作，当start &gt; end时）</span>
<span class="token comment">// substr: start为负代表倒数，num为负代表0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-引用类型-object" tabindex="-1"><a class="header-anchor" href="#_7-引用类型-object" aria-hidden="true">#</a> 7. 引用类型 Object</h2><p>对象是由多个键值对构成的无序合集</p><h3 id="_7-1-引用数据类型与简单数据类型的区别" tabindex="-1"><a class="header-anchor" href="#_7-1-引用数据类型与简单数据类型的区别" aria-hidden="true">#</a> 7.1 引用数据类型与简单数据类型的区别</h3><ol><li>有属性和方法</li><li>内部可改变</li><li>变量保存的是对象的<code>指针</code></li></ol><p>对象实例都会有一个<code>__proto__</code>属性（不可枚举）指向原型，专有方法由原型链继承而来；对象在使用字面量表示法即<code>let o = { ... }</code>的形式定义时，其<strong>proto</strong>为 Object。（最纯的空对象:Object.create(null)）</p><h3 id="_7-2-属性特征-学习源码时需要" tabindex="-1"><a class="header-anchor" href="#_7-2-属性特征-学习源码时需要" aria-hidden="true">#</a> 7.2 属性特征( 学习源码时需要 )</h3><p><code>configurable</code>、<code>enumerable</code>、<code>writable</code>、<code>value</code>、<code>getter/setter</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>
        <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> _name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">set</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            _name <span class="token operator">=</span> str<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-function" tabindex="-1"><a class="header-anchor" href="#_8-function" aria-hidden="true">#</a> 8. Function</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">Function</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;0&#39;</span><span class="token operator">:</span> 传参<span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;1&#39;</span><span class="token operator">:</span> 传参<span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">callee</span><span class="token operator">:</span> 函数 <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">caller</span><span class="token operator">:</span> 函数调用者指针<span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token operator">:</span> fReference<span class="token punctuation">.</span>base<span class="token punctuation">,</span>
  <span class="token literal-property property">__proto__</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-1-函数参数" tabindex="-1"><a class="header-anchor" href="#_8-1-函数参数" aria-hidden="true">#</a> 8.1 函数参数</h3><ol><li>参数不是必须的(但不写你会被同事打)，只是方便书写和阅读，内部是使用<code>arguments</code>伪数组来存储传入参数</li><li>参数是<code>按值传递</code>的，对于引用类型传递的是<code>指针</code>而非在堆空间 new 出来的对象本身</li><li>即使定义了参数个数，但在函数调用时依旧可传入多于或少于规定的参数个数</li><li>函数没有签名，不能规定传入参数类型（TypeScript 弥补了这一缺陷）</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span> 等价于 <span class="token function">fun</span><span class="token punctuation">(</span>argument<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> argument<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> person <span class="token punctuation">)</span>

<span class="token comment">// argument[1].name =&#39;jack&#39;会修改到person 而argument[1]={name:&#39;jack&#39;}不会</span>
<span class="token comment">// 相当于改变了argument[1]的指针，不再和person同一个指针</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2-函数里的-this" tabindex="-1"><a class="header-anchor" href="#_8-2-函数里的-this" aria-hidden="true">#</a> 8.2 函数里的 this</h3><p>指向函数的实际调用对象，不恰当的来说，在哪个对象内部环境执行，this 就保存哪个对象的指针，注意：this 只在函数被调用时才确定，定义时未确定！</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 执行前发生的事:</span>
<span class="token comment">// 1.计算MemberExpression即fn，获得fnReference</span>
fnReference <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">base</span><span class="token operator">:</span> obj<span class="token punctuation">,</span>
    <span class="token literal-property property">propertyName</span><span class="token operator">:</span> <span class="token string">&#39;fn&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">strict</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 执行时，创建fn的执行上下文fnEC</span>
fnEC <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token constant">AO</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">callee</span><span class="token operator">:</span> fn <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">this</span><span class="token operator">:</span> fnReference<span class="token punctuation">.</span>base<span class="token punctuation">,</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Scope</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">VO</span><span class="token punctuation">,</span> <span class="token constant">AO</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>☆ 手动指定 this 的方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回一个绑定了obj为this的函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3-函数的三种表达式" tabindex="-1"><a class="header-anchor" href="#_8-3-函数的三种表达式" aria-hidden="true">#</a> 8.3 函数的三种表达式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 函数声明式</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token comment">// 函数表达式</span>
<span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token comment">// 命名函数表达式</span>
<span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>区别：</p><ol><li>函数声明式存在<code>函数提升</code>的效果，即声明前调用是允许的，而函数表达式则要解析器执行到它所在代码行时，才会被解释执行</li><li>函数声明式会给函数对象设置<code>name</code>为函数名，而函数表达式由于本质上是声明一个匿名函数再赋值指针给这个函数变量，name 为&quot;&quot;</li><li>命名函数表达式和函数声明式差不多，也会为函数对象设置 name，只是将函数指针保存到一个变量而已，无函数提升现象，表现与普通变量提升一样</li></ol><h3 id="_8-4-自执行函数" tabindex="-1"><a class="header-anchor" href="#_8-4-自执行函数" aria-hidden="true">#</a> 8.4 自执行函数</h3><p>将函数声明语句转化为自执行函数的方法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token boolean">false</span> <span class="token operator">||</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 一元操作符:+、-、*、/、！、~、&amp;、|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自执行函数作用：</p><ol><li>避免作用域下的命名污染和命名冲突</li><li>利于压缩，一些源码都会大量使用自执行函数</li></ol><p>另外自执行函数前最好加一个&quot;;&quot;, 防止报错</p><h2 id="_9-array" tabindex="-1"><a class="header-anchor" href="#_9-array" aria-hidden="true">#</a> 9. Array</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">Array</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token string-property property">&#39;0&#39;</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;1&#39;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;2&#39;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token literal-property property">__proto__</span><span class="token operator">:</span> Array
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组的每一项可保存任何类型的数据，数组本质上是一个对象，索引对应属性 key，项值对应属性值 value，其 length 由项数双向动态决定。</p><p><code>new Array(7)</code>相当于创建一个数组，且其 length = 7，每个项都为 undefined（特别地，delete 掉数组的 key，length 不变，而是将 delete 的 key 对应的 value 设为 undefined）</p><h3 id="_9-1-判断是否为数组的方法" tabindex="-1"><a class="header-anchor" href="#_9-1-判断是否为数组的方法" aria-hidden="true">#</a> 9.1 判断是否为数组的方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Array<span class="token punctuation">;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;[object Array]&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-2-常用数组方法" tabindex="-1"><a class="header-anchor" href="#_9-2-常用数组方法" aria-hidden="true">#</a> 9.2 常用数组方法</h3><p>① 会修改原数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 数组尾项插值</span>
<span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 数组首项插值</span>
<span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 删尾项并返回</span>
<span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 删首项并返回</span>
<span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 反转数组</span>
<span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 对数组进行排序，传入参数为比较函数</span>
<span class="token comment">// arr.sort( (a,b) =&gt; a - b ) 比较函数，返回负数按从小到大排序</span>
☆ <span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> num<span class="token punctuation">,</span> newArr<span class="token punctuation">)</span> <span class="token comment">// 从start开始往后删num个项，并在start处插入newArr，返回删除的项组成的数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 不修改原数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拼接数组</span>
<span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 截取[start,end),end默认为数组长度,start默认为0</span>
<span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从start开始向后查找首个匹配value的项的index并返回，无返回-1</span>
<span class="token function">lastIndexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从后查找</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 数组迭代方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1、检测</span>
<span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对数组每个项运行传入函数，若都return true，则最终return true</span>
<span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 若有一个结果return true，则return true</span>
<span class="token comment">// 2、筛选</span>
<span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回return true的项组成的数组</span>
<span class="token comment">// 3、遍历</span>
<span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无返回值（相当于for循环）</span>
<span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回回调函数返回结果组成的数组</span>
<span class="token comment">// 4、归并</span>
<span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> preNum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 其中prev = prev’ + cur’,最开始prev为0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> res<span class="token punctuation">;</span>

res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> index <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,4]</span>
res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2,4,6,8]</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>item <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4] 不变</span>

res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> pre <span class="token operator">+</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-global" tabindex="-1"><a class="header-anchor" href="#_10-global" aria-hidden="true">#</a> 10. Global</h2><p>定义全局环境，在浏览器宿主环境中作为 window 对象的一部分存在来加以实现 方法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">decodeURICompnent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">URI</span>：Uniform Resource Identifier<span class="token punctuation">,</span>统一资源标识符
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>属性：<code>undefined</code>、<code>NaN</code>、<code>Infinity</code>以及各种对象构造器</p><h2 id="_11-math" tabindex="-1"><a class="header-anchor" href="#_11-math" aria-hidden="true">#</a> 11. Math</h2><p>方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token comment">// 或max.apply(Math,arr)</span>
<span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>
<span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 向上取舍</span>
<span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 向下取舍</span>
<span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 四舍五入</span>
<span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 绝对值</span>
<span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 平方根</span>
<span class="token function">pow</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span> <span class="token comment">// n^m</span>
<span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 生成[0, 1)区间随机数</span>
☆Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token comment">// 生成[l , r]区间随机整数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="☆12-作用域与作用域链-context-scope" tabindex="-1"><a class="header-anchor" href="#☆12-作用域与作用域链-context-scope" aria-hidden="true">#</a> ☆12. 作用域与作用域链 (Context &amp; Scope)</h2><p>略，传送门 👇👇👇</p>`,118),r={href:"https://juejin.cn/post/7121724252381773861",target:"_blank",rel:"noopener noreferrer"},d=s(`<h2 id="☆13-原型链" tabindex="-1"><a class="header-anchor" href="#☆13-原型链" aria-hidden="true">#</a> ☆13. 原型链</h2><p>逐层向上查询，找到立即中断查询</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>instance <span class="token operator">--</span><span class="token operator">&gt;</span> instance<span class="token punctuation">.</span>__proto__ <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token operator">...</span> <span class="token operator">--</span><span class="token operator">&gt;</span> Object <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">hasPrototypeProperty</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回对象上所有可枚举属性组成的数组</span>
key <span class="token keyword">in</span> obj<span class="token punctuation">;</span> <span class="token comment">// 返回布尔值，in操作符范围扩展到原型上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取自有属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 或</span>
arr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ES5新增（不可枚举属性也返回）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="☆14-创建对象模式" tabindex="-1"><a class="header-anchor" href="#☆14-创建对象模式" aria-hidden="true">#</a> ☆14. 创建对象模式</h2><h3 id="_14-1-工厂模式" tabindex="-1"><a class="header-anchor" href="#_14-1-工厂模式" aria-hidden="true">#</a> 14.1 工厂模式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">age<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  o<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Jack&quot;</span>
  o<span class="token punctuation">.</span><span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
  <span class="token keyword">return</span> o
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本质：内部创建一个对象实例，并赋上传入的属性值，最后返回</p><p>缺点：不能自定义对象类型</p><h3 id="_14-2-构造模式" tabindex="-1"><a class="header-anchor" href="#_14-2-构造模式" aria-hidden="true">#</a> 14.2 构造模式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点: 方法要在每个实例上重新在创建一遍，占内存且复用性差！</p><h3 id="_14-3-原型模式-属性、方法共享" tabindex="-1"><a class="header-anchor" href="#_14-3-原型模式-属性、方法共享" aria-hidden="true">#</a> 14.3 原型模式（属性、方法共享）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Jack&quot;</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="☆14-4-构造原型模式-属性私有-方法共享" tabindex="-1"><a class="header-anchor" href="#☆14-4-构造原型模式-属性私有-方法共享" aria-hidden="true">#</a> ☆14.4 构造原型模式（属性私有，方法共享）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 属性私有</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
<span class="token comment">// 方法共享</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-5-扩展" tabindex="-1"><a class="header-anchor" href="#_14-5-扩展" aria-hidden="true">#</a> 14.5 扩展</h3><h4 id="动态原型模式" tabindex="-1"><a class="header-anchor" href="#动态原型模式" aria-hidden="true">#</a> 动态原型模式</h4><p>动态添加方法，可防止错误将原型方法置 null 的情况</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">!=</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="寄生构造函数模式-工厂-构造" tabindex="-1"><a class="header-anchor" href="#寄生构造函数模式-工厂-构造" aria-hidden="true">#</a> 寄生构造函数模式（工厂 + 构造）</h4><p>主要用于扩展原生对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">SuperArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">.</span><span class="token function-variable function">toSerial</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="稳妥构造函数模式" tabindex="-1"><a class="header-anchor" href="#稳妥构造函数模式" aria-hidden="true">#</a> 稳妥构造函数模式</h4><p>将内部变量私有化，对外提供接口访问</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment">// 私有变量</span>
    <span class="token keyword">let</span> age <span class="token operator">=</span> age<span class="token punctuation">;</span>

    <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对外暴露API</span>
    o<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> name <span class="token operator">+</span> <span class="token string">&#39;77&#39;</span><span class="token punctuation">;</span>
    o<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token parameter">newName</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> newName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> o<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="☆15-继承" tabindex="-1"><a class="header-anchor" href="#☆15-继承" aria-hidden="true">#</a> ☆15. 继承</h2><p>这里插一句：ES6 原生可以实现继承，而 ES5 得自己实现！</p><h3 id="_15-1-原型链继承" tabindex="-1"><a class="header-anchor" href="#_15-1-原型链继承" aria-hidden="true">#</a> 15.1 原型链继承</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>存在问题：</p><ol><li>父实例中的属性成了公有属性</li><li>创建子实例时不能向父类的构造函数传递参数</li></ol><h3 id="_15-2-构造函数继承" tabindex="-1"><a class="header-anchor" href="#_15-2-构造函数继承" aria-hidden="true">#</a> 15.2 构造函数继承</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">B</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="☆15-3-组合继承" tabindex="-1"><a class="header-anchor" href="#☆15-3-组合继承" aria-hidden="true">#</a> ☆15.3 组合继承</h3><p>即上述两种方法结合</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
<span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">B</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 原型为：{ name: undefined }</span>
<span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> <span class="token constant">A</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点: 子类实例与其原型有同名属性，不优雅</p><h3 id="☆15-4-寄生组合式继承-完美继承" tabindex="-1"><a class="header-anchor" href="#☆15-4-寄生组合式继承-完美继承" aria-hidden="true">#</a> ☆15.4 寄生组合式继承（完美继承）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="bom" tabindex="-1"><a class="header-anchor" href="#bom" aria-hidden="true">#</a> BOM</h1><hr><p><strong>Browser Object Model</strong>，包含用于访问浏览器的各种接口：</p><blockquote><p>window、Location、History、Navigator、Screen</p></blockquote><h2 id="_1-window" tabindex="-1"><a class="header-anchor" href="#_1-window" aria-hidden="true">#</a> 1. window</h2><p>既是通过 JS 访问浏览器窗口的一个接口，也是 ES 规定的 Global 对象</p><h3 id="_1-1-属性" tabindex="-1"><a class="header-anchor" href="#_1-1-属性" aria-hidden="true">#</a> 1.1 属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>screenLeft、screenTop <span class="token comment">// 窗口相对于屏幕左(上)方的位置</span>
outerWidth、outerHeight <span class="token comment">// 窗口总宽高</span>
innerWidth、innerHeight <span class="token comment">// 窗口视图区宽高</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-方法" tabindex="-1"><a class="header-anchor" href="#_1-2-方法" aria-hidden="true">#</a> 1.2 方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">open</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token string">&#39;_self&#39;</span> <span class="token operator">/</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span> <span class="token comment">//打开一个新窗口</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span>
<span class="token function">clearTimeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token function">clearInterva</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token function">confirm</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token comment">// 弹出模态框，打印msg，根据用户选择返回boolean值</span>
<span class="token function">prompt</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token comment">// 弹出模态框，打印msg，根据用户输入返回string值</span>
<span class="token function">moveTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token function">moveBy</span><span class="token punctuation">(</span>⊿x <span class="token punctuation">,</span> ⊿y<span class="token punctuation">)</span> <span class="token comment">// 改变窗口相对屏幕的坐标</span>
<span class="token function">resizeTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>   <span class="token function">resizeBy</span><span class="token punctuation">(</span>⊿x<span class="token punctuation">,</span> ⊿y<span class="token punctuation">)</span> <span class="token comment">// 改变窗口总宽高</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>setTimeout 和 setInterval 的注意点:</p><ol><li>两者都按指定时间，将回调函数推入 JS 任务队列，异步执行（宏--&gt;微--&gt;宏），等主线程中所有同步任务都已经执行完毕之后才会被推入执行栈</li><li><code>setTimeout(cb, 0)</code>相当于将 cb 推入 JS 任务队列底部</li><li>setInterval 的时间间隔最短为用户电脑<code>显示器刷新频率</code>60HZ（16.7ms）</li><li>setInterval 具有<code>累积效应</code>，即上一个任务开始执行时，下一个任务就已经开启计时，可能导致任务重叠执行</li><li>由于 4，故一般要采用 setTimeout 递归来模拟</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>可应用在轮播图切换、页面滚动场景中，但是会因为显示器刷新频率的原因造成卡顿 ，所以最好还是用 css3 来定制动画(<code>animation、@keyFrame</code>)或者使用<code>requestAnimation frame</code></li></ol><h2 id="_2-location" tabindex="-1"><a class="header-anchor" href="#_2-location" aria-hidden="true">#</a> 2. Location</h2><p>主要提供当前窗口中加载文档相关信息以及一些导航功能</p><h3 id="_2-1-属性" tabindex="-1"><a class="header-anchor" href="#_2-1-属性" aria-hidden="true">#</a> 2.1 属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>protocal<span class="token punctuation">;</span> <span class="token comment">// 协议</span>
hostname<span class="token punctuation">;</span> <span class="token comment">// 域名</span>
port<span class="token punctuation">;</span> <span class="token comment">// 端口号</span>
pathname<span class="token punctuation">;</span> <span class="token comment">// 目录和文件名</span>
hash<span class="token punctuation">;</span> <span class="token comment">// 哈希值</span>
search<span class="token punctuation">;</span> <span class="token comment">// 查询字符串（以&quot;?&quot;开头）</span>
href<span class="token punctuation">;</span> <span class="token comment">// 完整URL即（protocal + &#39;: //&#39; + hostname）也是Location对象toString的返回值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-跳转操作" tabindex="-1"><a class="header-anchor" href="#_2-2-跳转操作" aria-hidden="true">#</a> 2.2 跳转操作</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">;</span>
location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">;</span>
location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会生成历史记录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-history" tabindex="-1"><a class="header-anchor" href="#_3-history" aria-hidden="true">#</a> 3.History</h2><p>跳转页面之间的切换</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 历史记录长度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-navigator" tabindex="-1"><a class="header-anchor" href="#_4-navigator" aria-hidden="true">#</a> 4.Navigator</h2><p>获取客户端信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取代理客户端</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="dom" tabindex="-1"><a class="header-anchor" href="#dom" aria-hidden="true">#</a> DOM</h1><hr><p><strong>Document Object Model</strong>，针对于 HTML 和 XML 文档提供的 API，描绘一个层次化的节点树，允许对节点增删改查等操作</p><h2 id="_1-node-类型" tabindex="-1"><a class="header-anchor" href="#_1-node-类型" aria-hidden="true">#</a> 1. Node 类型</h2><p>由 DOM1 级定义，在 JS 中作为 Node 类型实现，<code>将html元素映射作js中的Node类</code>，从而方便操作 dom</p><p>10 个公有属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>nodeType<span class="token punctuation">;</span> <span class="token comment">// 节点类型</span>
nodeName<span class="token punctuation">;</span> <span class="token comment">// 节点名称</span>
nodeValue<span class="token punctuation">;</span>
childNodes<span class="token punctuation">;</span> <span class="token comment">// 所有子节点（包括空格文本节点）构成的NodeList动态伪数组</span>
ownerDocument<span class="token punctuation">;</span> <span class="token comment">// 返回document</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>firstChild<span class="token punctuation">;</span>
lastChild<span class="token punctuation">;</span>
parentNode<span class="token punctuation">;</span>
nextSibling<span class="token punctuation">;</span>
previousSibling<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>7 个公有方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">hasChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 深拷贝</span>
<span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 合并文本节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">appendChild</span><span class="token punctuation">(</span>newEl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 增</span>
<span class="token function">insertBefore</span><span class="token punctuation">(</span>newEl<span class="token punctuation">,</span> curEl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插</span>
<span class="token function">removeChild</span><span class="token punctuation">(</span>curEl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删</span>
<span class="token function">replaceChild</span><span class="token punctuation">(</span>newEl<span class="token punctuation">,</span> curEl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 改</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-document" tabindex="-1"><a class="header-anchor" href="#_2-document" aria-hidden="true">#</a> 2. document</h2><p>是<code>&lt;html&gt;</code>节点的父节点、根节点、文档节点</p><p>属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>title<span class="token punctuation">;</span> <span class="token comment">// 文档名</span>
charset<span class="token punctuation">;</span> <span class="token comment">// 字符集</span>

doctype<span class="token punctuation">;</span> <span class="token comment">// &lt;!DOCTYPE&gt;</span>
documentElement<span class="token punctuation">;</span> <span class="token comment">// &lt;html&gt;</span>
body<span class="token punctuation">;</span> <span class="token comment">// &lt;body&gt;</span>
head<span class="token punctuation">;</span> <span class="token comment">// &lt;head&gt;</span>
forms<span class="token punctuation">;</span> <span class="token comment">// 所有&lt;form&gt;</span>
Images<span class="token punctuation">;</span> <span class="token comment">// 所有&lt;img&gt;</span>
links<span class="token punctuation">;</span> <span class="token comment">// 所有&lt;a&gt;</span>

<span class="token comment">// 网址相关</span>
<span class="token constant">URL</span><span class="token punctuation">;</span> <span class="token comment">// 网址</span>
domain<span class="token punctuation">;</span> <span class="token comment">// 域名</span>
referrer<span class="token punctuation">;</span> <span class="token comment">// 来源页面</span>

readyState<span class="token punctuation">;</span> <span class="token comment">// 页面加载状态 &#39;loading&#39; / &#39;complete&#39;</span>
compatMode<span class="token punctuation">;</span> <span class="token comment">// 浏览器渲染模式 &#39;CSS1Compat&#39; / &#39;BackCompat&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 动态HTMLCollection伪数组:</span>
<span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、getElementsByClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、getElementsByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 静态伪数组:</span>
<span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、querySelectorAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 创建元素节点</span>
<span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&quot;this is a text&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 创建文本节点</span>
<span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建DOM片段</span>

<span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、writeln</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 空之前的内容</span>
<span class="token function">hasFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 判断是否聚焦，一般是针对于input类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动态集合：DOM 结构变化能自动映射到保存的伪数组中（有引用关系）</p><p>静态集合：DOM 结构变化不会反映到之前保存的伪数组中（仅 copy 关系）</p><p>☆ 动态集合比静态性能好很多，一个从 DOM 缓存中直接获取，一个要在后台遍历一次 DOM，一般难获取的节点才会使用 query</p><h2 id="_3-element-类型" tabindex="-1"><a class="header-anchor" href="#_3-element-类型" aria-hidden="true">#</a> 3. Element 类型</h2><p>很多属性和方法其实已继承 document</p><p>属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>id<span class="token punctuation">;</span>
className<span class="token punctuation">;</span>
classList<span class="token punctuation">;</span> <span class="token comment">// class数组</span>
data <span class="token operator">-</span> key<span class="token punctuation">;</span> <span class="token comment">// 自定义特殊属性</span>
tagName<span class="token punctuation">;</span>
value<span class="token punctuation">;</span>
children<span class="token punctuation">;</span> <span class="token comment">// HTMLColloction数组(不包含文本节点)</span>
parentNode<span class="token punctuation">;</span> <span class="token comment">// 父节点</span>
attributes<span class="token punctuation">;</span> <span class="token comment">// attrs数组</span>
innerHTML<span class="token punctuation">;</span> <span class="token comment">// 返回元素所有子节点对应的HTML标记</span>
outerHTML<span class="token punctuation">;</span> <span class="token comment">// 扩大范围到元素自身</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 以data-为前缀的特殊属性对应的值</span>
<span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>childNodes</code>与<code>children</code>的区别：</p><ol><li>childNodes 是<code>nodeList</code>伪数组（包含文本节点和空格）</li><li>children 是<code>HTMLColloction</code>伪数组（不包含文本节点）</li></ol><p>classList 方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">toggle</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切换类名</span>
<span class="token function">add</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加类名</span>
<span class="token function">remove</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除类名</span>
<span class="token function">contains</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断是否包含类名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-事件" tabindex="-1"><a class="header-anchor" href="#_4-事件" aria-hidden="true">#</a> 4. 事件</h2><h3 id="_4-1-事件流" tabindex="-1"><a class="header-anchor" href="#_4-1-事件流" aria-hidden="true">#</a> 4.1 事件流</h3><blockquote><p>捕获阶段 --&gt; 目标阶段 --&gt; 冒泡阶段</p></blockquote><p>注意：从 window 开始捕获, 仅与 DOM 结构有关而与 CSS 样式无关</p><h3 id="_4-2-事件处理程序" tabindex="-1"><a class="header-anchor" href="#_4-2-事件处理程序" aria-hidden="true">#</a> 4.2 事件处理程序</h3><p>响应某个事件的函数，由<code>on</code>+<code>事件名称</code>构成，形如<code>onEvent</code></p><h4 id="_4-2-1-html-事件处理程序" tabindex="-1"><a class="header-anchor" href="#_4-2-1-html-事件处理程序" aria-hidden="true">#</a> 4.2.1 HTML 事件处理程序</h4><p>回调函数绑定在标签上</p><p>缺点：</p><ol><li>HTML 和 JS 代码紧密耦合，不利于维护</li><li>时差问题，即元素一出现在页面上就触发相应事件（如 onload），但事件处理程序还未就绪</li></ol><h4 id="_4-2-2-dom0-级事件处理程序" tabindex="-1"><a class="header-anchor" href="#_4-2-2-dom0-级事件处理程序" aria-hidden="true">#</a> 4.2.2 DOM0 级事件处理程序：</h4><p>回调函数绑定在标签对应的 dom 上</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 注销事件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-3-dom2-级事件处理程序" tabindex="-1"><a class="header-anchor" href="#_4-2-3-dom2-级事件处理程序" aria-hidden="true">#</a> 4.2.3 DOM2 级事件处理程序：</h4><p>回调函数也是绑定在标签对应的 dom 上，只是绑定的方式优雅规范一些</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token comment">// 第三个参数为是否在捕获阶段就执行回调，默认为false即冒泡阶段执行</span>
btn<span class="token punctuation">.</span>removeEventListener<span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 注销事件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ol><li>不存在重写：给一个 dom 添加多个相同的事件处理程序会从上到下依次执行</li><li>DOM 节点被移除前，最好手动解绑事件处理程序，以防内存泄漏</li></ol><h3 id="_4-3-事件对象-event" tabindex="-1"><a class="header-anchor" href="#_4-3-事件对象-event" aria-hidden="true">#</a> 4.3 事件对象 event</h3><p>在事件处理程序作为第一个参数 event 传入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>target <span class="token comment">// 事件实际目标</span>
currentTarget <span class="token comment">// 当前正在处理事件的元素</span>

type <span class="token comment">// 事件类型</span>
bubbles <span class="token comment">// 事件是否冒泡</span>
eventPhase <span class="token comment">// 1.捕获 2.目标 3.冒泡</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取消事件默认行为</span>
<span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取消事件进一步冒泡</span>
<span class="token function">stopImmediatePropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取消事件进一步冒泡, 同时阻止任何事件处理程序调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个应用实例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 一个函数处理多个事件</span>
<span class="token keyword">let</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&#39;click&#39;</span><span class="token operator">:</span>
            e<span class="token punctuation">.</span>preventDefault<span class="token punctuation">;</span> <span class="token comment">// 取消inputSubmit的提交行为</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&#39;mouseover&#39;</span><span class="token operator">:</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// buttonElement</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&#39;mouseout&#39;</span><span class="token operator">:</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// buttonElement.id</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
inputSubmit<span class="token punctuation">.</span>onclick <span class="token operator">=</span> handler<span class="token punctuation">;</span>
btn<span class="token punctuation">.</span>onmouseout <span class="token operator">=</span> handler<span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseover&#39;</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-事件委托" tabindex="-1"><a class="header-anchor" href="#_4-4-事件委托" aria-hidden="true">#</a> 4.4 事件委托</h3><p>利用<code>事件冒泡</code>，在 DOM 树最高层上绑定事件处理程序，即可统一处理子 DOM 事件</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>li1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>li2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>li3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ul<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&#39;li1&#39;</span><span class="token operator">:</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&#39;li2&#39;</span><span class="token operator">:</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&#39;li3&#39;</span><span class="token operator">:</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h1><hr><p><strong>JS Object Notation</strong>，即 JavaScript 对象表示法，JSON 是一种数据格式，用于在互联网上传输结构化数据，很多编程语言都有针对 JSON 的<code>解析器</code>和<code>序列化器</code></p><h2 id="_1-json-可表示的数据类型" tabindex="-1"><a class="header-anchor" href="#_1-json-可表示的数据类型" aria-hidden="true">#</a> 1. JSON 可表示的数据类型</h2><p>Object、Array、String、Number、Boolean，不支持 undefined</p><h2 id="_2-json-对象格式" tabindex="-1"><a class="header-anchor" href="#_2-json-对象格式" aria-hidden="true">#</a> 2. JSON 对象格式</h2><ul><li>无声明变量</li><li>没有末尾分号</li><li>属性必须加双引号，数组同理</li></ul><h2 id="_3-序列化器" tabindex="-1"><a class="header-anchor" href="#_3-序列化器" aria-hidden="true">#</a> 3. 序列化器</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将obj对象转换成JSON对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-解析器" tabindex="-1"><a class="header-anchor" href="#_4-解析器" aria-hidden="true">#</a> 4. 解析器</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将JSON对象转换为obj对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用JSON实现对象深克隆</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax" aria-hidden="true">#</a> AJAX</h1><hr><p><strong>Asynchronous Javascript And XML</strong>，异步 JS 及 XML，技术核心是<code>XMLHttpRequest</code>实例对象 xhr，即向服务器发送请求和解析服务器响应的接口，以异步方式从服务器取得更多信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建xhr</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> readyState<span class="token punctuation">,</span> status<span class="token punctuation">,</span> responseText <span class="token punctuation">}</span> <span class="token operator">=</span> xhr<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//可用xhr.onload = (event) =&gt; {......} 代替简化</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> status <span class="token operator">==</span> <span class="token number">304</span><span class="token punctuation">)</span>
            res <span class="token operator">=</span> responseText<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;请求失败: &#39;</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;URL&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送请求</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>xhr 属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>readyState <span class="token comment">// 请求完成状态</span>
<span class="token number">0</span><span class="token operator">:</span> <span class="token function">未使用open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">1</span><span class="token operator">:</span> <span class="token function">调用了open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">未调用send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">2</span><span class="token operator">:</span> <span class="token function">调用send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>但未接收到响应
<span class="token number">3</span><span class="token operator">:</span> 已经接收到部分响应数据
<span class="token number">4</span><span class="token operator">:</span> 已接收到全部响应数据

status <span class="token comment">// 响应HTTP状态</span>
<span class="token number">200</span><span class="token operator">:</span> 成功
<span class="token number">304</span><span class="token operator">:</span> 请求资源并未修改可直接使用浏览器中的缓存
<span class="token number">301</span>
<span class="token number">302</span>
<span class="token number">303</span>

responseText <span class="token comment">// 作为响应主体返回的文本(JSON格式)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>xhr 方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;method&quot;</span><span class="token punctuation">,</span> <span class="token constant">URL</span><span class="token punctuation">,</span> boolean<span class="token punctuation">)</span> 第三个参数表示是否异步
<span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span>
<span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">&quot;响应头&quot;</span><span class="token punctuation">)</span>
<span class="token function">getRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;请求头&quot;</span><span class="token punctuation">)</span>
<span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;请求头&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;值&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="cors" tabindex="-1"><a class="header-anchor" href="#cors" aria-hidden="true">#</a> CORS</h1><hr><h2 id="_1-问题来源" tabindex="-1"><a class="header-anchor" href="#_1-问题来源" aria-hidden="true">#</a> 1. 问题来源:</h2><p>通过 XHR 实现 AJAX 通信有跨域问题（出于安全，XHR 对象只能访问同源资源）</p><h2 id="_2-解决方案" tabindex="-1"><a class="header-anchor" href="#_2-解决方案" aria-hidden="true">#</a> 2.解决方案</h2><p><code>CORS</code>：Cross—Origin Resource Sharing， 跨域资源共享，定义了必须跨域访问时，浏览器与服务器应如何沟通。根本思想是使用<code>自定义的HTTP头部</code>让浏览器与服务器进行沟通</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">Origin</span><span class="token operator">:</span> <span class="token string">&quot;http://www.domain.com&quot;</span>  <span class="token comment">// 请求源</span>
Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin<span class="token operator">:</span> <span class="token string">&quot;https://www.domain.com&quot;</span>  <span class="token comment">// 服务器允许源</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-cors-的实现" tabindex="-1"><a class="header-anchor" href="#_3-cors-的实现" aria-hidden="true">#</a> 3. CORS 的实现</h2><ol><li>可通过 xhr 对象实现对 CORS 的原生支持，只要传入绝对 URL 即可，但跨域 XHR 有一些安全限制： 1.不能使用 setRequestHeader(“请求头”, “值”)设置自定义头部 2.调用 getAllResponseHeaders()返回空字符串 3.不能发送和接收 cookie</li><li>Preflighted Requests</li><li>带凭据的请求(withCredentials)</li></ol><p>简单的跨浏览器 CORS</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createCORSRequest</span><span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;withCredentials&#39;</span> <span class="token keyword">in</span> xhr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> xhr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> XDomainRequest <span class="token operator">!=</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XDomainRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> xhr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-其他跨域技术" tabindex="-1"><a class="header-anchor" href="#_4-其他跨域技术" aria-hidden="true">#</a> 4. 其他跨域技术：</h2><ol><li>JSONP： <code>&lt;script&gt;</code>可以跨域</li><li>Comet：服务器向页面单向推送数据</li><li>SSE：服务器向页面发送事件</li><li>Web Sockets：全双工、双向通信</li></ol>`,164);function k(v,m){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[n("a",r,[c("《一文搞懂执行上下文、VO、AO、Scope、[[scope]]、作用域链、闭包》"),i(a)])]),d])}const h=e(l,[["render",k],["__file","《JavaScriptgaojichengxusheji》xuexibiji.html.vue"]]);export{h as default};
