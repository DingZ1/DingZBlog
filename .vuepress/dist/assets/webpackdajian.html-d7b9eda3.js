import{_ as s,o as n,c as a,e}from"./app-3a979dd6.js";const p={},t=e(`<h2 id="_1-初始化项目" tabindex="-1"><a class="header-anchor" href="#_1-初始化项目" aria-hidden="true">#</a> 1.初始化项目</h2><h3 id="_1-1-创建项目并初始化package-json" tabindex="-1"><a class="header-anchor" href="#_1-1-创建项目并初始化package-json" aria-hidden="true">#</a> 1.1 创建项目并初始化<code>package.json</code></h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm init -y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-安装-webpack-和-webpack-cli" tabindex="-1"><a class="header-anchor" href="#_1-2-安装-webpack-和-webpack-cli" aria-hidden="true">#</a> 1.2 安装 webpack 和 webpack-cli</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i webpack webpack-cli -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-3-在根目录下创建默认的-webpack-配置入口文件webpack-config-js" tabindex="-1"><a class="header-anchor" href="#_1-3-在根目录下创建默认的-webpack-配置入口文件webpack-config-js" aria-hidden="true">#</a> 1.3 在根目录下创建默认的 webpack 配置入口文件<code>webpack.config.js</code></h3><p>该文件在执行 webpack 打包构建项目时会被读取里边的配置，所有的 loader、plugin 以及其他都在这里配置。若要修改默认配置文件的入口，可执行以下指令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>webpack <span class="token parameter variable">--config</span> webpack.dev.config.js
// webpack.config.js <span class="token operator">==</span><span class="token operator">&gt;</span> webpack.dev.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-在package-json文件中配置-webpack-命令脚本" tabindex="-1"><a class="header-anchor" href="#_1-4-在package-json文件中配置-webpack-命令脚本" aria-hidden="true">#</a> 1.4 在<code>package.json</code>文件中配置 webpack 命令脚本</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --config webpack.config.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在命令行执行如下命令，即可打包构建当前项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-webpack-配置入口和出口" tabindex="-1"><a class="header-anchor" href="#_2-webpack-配置入口和出口" aria-hidden="true">#</a> 2.Webpack 配置入口和出口</h2><p>在<code>webpack.config.js</code>文件中</p><ul><li><code>entry</code>字段对应入口文件</li><li><code>output.path</code>字段对应出口文件所在目录路径</li><li><code>output.filename</code>字段对应出口文件名</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/main.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 出口</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在根目录下执行以下指令，会将<code>src/main.js</code>作为入口文件开始编译打包输出为<code>dist</code>目录下的<code>bundle.js</code>文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>webpack
// 或者
<span class="token function">npm</span> run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者不用在<code>webpack.config.js</code>中配置<code>entry</code>和<code>output</code>，在<code>package.json</code>文件中定义脚本(不推荐)</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --entry ./src --output-path ./dist&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_3-loader" tabindex="-1"><a class="header-anchor" href="#_3-loader" aria-hidden="true">#</a> 3.Loader</h2><p>Loader 用于<code>预编译</code>及其<code>处理依赖关系</code>，通常是在<code>webpack.config.js</code>文件中的<code>module.rules</code>字段配置</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> LR
A<span class="token text string">(SASS LESS)</span> <span class="token arrow operator">--</span> sass-loader less-loader <span class="token arrow operator">--&gt;</span>B<span class="token text string">(CSS)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> LR
A<span class="token text string">(ES6/7/8/9/10)</span> <span class="token arrow operator">--</span> babel-loader <span class="token arrow operator">--&gt;</span>B<span class="token text string">(JS)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> LR
A<span class="token text string">(TS)</span> <span class="token arrow operator">--</span> ts-loader <span class="token arrow operator">--&gt;</span>B<span class="token text string">(JS)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> LR
A<span class="token text string">(图片 MP3 MP4等资源)</span> <span class="token arrow operator">--</span> file-loader url-loader <span class="token arrow operator">--&gt;</span>B<span class="token text string">(JS)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 loader 还可以将所有类型文件都统一转化成<code>模块</code>，即 <code>“万物皆模块”</code>的前端工程化思想，从而可以根据<code>ESModule</code>或者<code>CommonJS</code>模块化规范引入任何类型的文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.ESModule规范</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> xx <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 导出</span>
<span class="token keyword">import</span> xx <span class="token keyword">from</span> <span class="token string">&#39;xx.js&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导入</span>
<span class="token keyword">import</span> <span class="token string">&#39;yy.css&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导出yy.css里的代码，前提需要css-loader处理</span>

<span class="token comment">// 2.CommonJS规范</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> xx <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 导出</span>
<span class="token keyword">let</span> xx <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;xx.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 导入</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-css-相关-loader" tabindex="-1"><a class="header-anchor" href="#_3-1-css-相关-loader" aria-hidden="true">#</a> 3.1 css 相关 loader</h3><h4 id="_3-1-1-css-loader" tabindex="-1"><a class="header-anchor" href="#_3-1-1-css-loader" aria-hidden="true">#</a> 3.1.1 css-loader</h4><p>用于编译 css 文件，使其可以作为一个模块以<code>import &#39;xx.css&#39;</code>的方式引入，首先需要安装<code>css-loader</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i css-loader -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>webpack.config.json</code>文件中<code>module.rules</code>中配置对应的 loader</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 模块</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// 打包规则</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 正则匹配到的以.css结尾的文件</span>
            <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 用css-loader预编译</span>

            <span class="token comment">// use其他写法</span>
            <span class="token comment">// use:[</span>
            <span class="token comment">//   { loader:&#39;css-loader&#39;} // &#39;css-loader&#39;是{loader:&#39;css-loader&#39;}简写</span>
            <span class="token comment">// ]</span>

            <span class="token comment">// loader:&#39;css-loader&#39; 若只有一个loader那么不用use</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-2-style-loader" tabindex="-1"><a class="header-anchor" href="#_3-1-2-style-loader" aria-hidden="true">#</a> 3.1.2 style-loader</h4><p><code> style-loader</code>用于将编译好的 css 文件以 style 标签的方式插入 html 文件中</p><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i style-loader -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
            <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token comment">// 注意数组项的顺序,这里会先css-loader处理后再交给style-loader处理,</span>
            <span class="token comment">// 这样css样式才会最终应用于html文件</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-3-less-loader-和-sass-loader" tabindex="-1"><a class="header-anchor" href="#_3-1-3-less-loader-和-sass-loader" aria-hidden="true">#</a> 3.1.3 less-loader 和 sass-loader</h4><p><code>less-loader</code>和<code>sass-loader</code>用于将 less、sass 文件编译成 css 文件</p><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i less-loader less sass-loader -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>补充：less 插件可以将指定 less 文件转译为 css 文件，指令如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">less</span> ./style/index.less ./style/index.css
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是这样是通过命令行手动一个一个编译的，不方便，故需要安装 less-loader，通过 webpack 配置，让 less-loader 自动调用 less 插件实现自动编译</p><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
            <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;less-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// less --&gt; css --&gt; 插入style标签</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(scss|sass)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
            <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sass-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-js-相关-loader" tabindex="-1"><a class="header-anchor" href="#_3-2-js-相关-loader" aria-hidden="true">#</a> 3.2 JS 相关 loader</h3><h4 id="_3-2-1-☆babel" tabindex="-1"><a class="header-anchor" href="#_3-2-1-☆babel" aria-hidden="true">#</a> 3.2.1 ☆babel</h4><p><code>babel</code>可以将<code>jsx</code>、<code>ts</code>、<code>es6+</code>、<code>vue</code>等转译为浏览器能够识别的<code>js</code>，并做兼容处理（根据配置的 browserslist 条件）</p><h5 id="babel-loader" tabindex="-1"><a class="header-anchor" href="#babel-loader" aria-hidden="true">#</a> babel-loader</h5><p><code>babel-loader</code>是一个非常非常非常重要的编译 JS 的插件，其中<code>@babel/preset-env</code>提供了全套的预置功能用以增强 babel-loader 例如：</p><ul><li><code>@babel/plugin-transform-arrow-functions</code>（转译箭头函数）</li><li><code>@babel/plugin-transform-block-function</code>(转译 const、let 语法)</li></ul><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i babel-loader @babel/core @babel/preset-env -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span><span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span><span class="token punctuation">{</span>
          <span class="token literal-property property">presets</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">]</span>
         <span class="token comment">// plugins:[</span>
         <span class="token comment">//  &#39;@babel/plugin-transform-arrow-functions&#39;,</span>
         <span class="token comment">//  &#39;@babel/plugin-transform-block-function&#39;,</span>
         <span class="token comment">// ]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">exclude</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span> <span class="token comment">// 排除node_modules目录</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="polyfill" tabindex="-1"><a class="header-anchor" href="#polyfill" aria-hidden="true">#</a> polyfill</h5><p><code>polyfill</code>是用于做兼容的 JS 代码填充插件，会根据 js 源码以及 broserslist 条件填充相应的代码，是作为<code>@bable/preset-env</code>的一个补丁。</p><p>例如源码中使用到<code>Promise</code>这个来自 ES6 的新玩意，而某些浏览器不会识别 Promise 这个对象，polyfill 会在打包构建项目时填充 Promise 的实现代码</p><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i core-js regenerator-runtime -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>core-js/stable</code>用于填充符合 ES 标准的新语法特性，<code>regenerator-runtime</code>用于编译 ES6 后新添加的<code>Generator函数</code></p><p>将 babel 插件从 webpack 配置中独立出来，在根目录下创建<code>babel.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span>
            <span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">useBuiltIns</span><span class="token operator">:</span> <span class="token string">&#39;usage&#39;</span><span class="token punctuation">,</span>
                <span class="token comment">// 默认为false，即不对js做填充处理</span>
                <span class="token comment">// usage，根据兼容浏览器及JS源码，按需填充(推荐)</span>
                <span class="token comment">// entry，根据兼容浏览器全填充，</span>
                <span class="token comment">// 坑：若为entry需要在入口js文件开头导入core-js/stable和regenerator-runtime/runtime</span>
                <span class="token literal-property property">corejs</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// 坑必须指定corejs版本</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者在根目录下创建<code>.babelrc</code>文件</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">&quot;useBuildIns&quot;</span><span class="token operator">:</span> <span class="token string">&quot;usage&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;corejs&quot;</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-2-vue-loader" tabindex="-1"><a class="header-anchor" href="#_3-2-2-vue-loader" aria-hidden="true">#</a> 3.2.2 vue-loader</h4><p>vue-loader@15 版本之前，配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;vue-loader&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vue-loader@15 版本后，需要加入 plugin</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vue-loader/lib/plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-3-ts-loader" tabindex="-1"><a class="header-anchor" href="#_3-2-3-ts-loader" aria-hidden="true">#</a> 3.2.3 ts-loader</h4><p><code>ts-loader</code>可以编译 ts 文件，但是推荐统一使用<code>babel-loader</code>，在<code>.babelrc</code>中配置<code>@babel/preset-typescript</code>即可</p><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i @babel/preset-typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
  presets:[
    [
      &#39;@babel/preset-env&#39;,
      {
        useBuildIns:&#39;usage&#39;,
        corejs:3
      }
   ],
   [ &#39;@babel/preset-typescript&#39; ]
  ]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-兼容处理" tabindex="-1"><a class="header-anchor" href="#_3-3-兼容处理" aria-hidden="true">#</a> 3.3 兼容处理</h3><h4 id="_3-3-1-browserslist-浏览器兼容" tabindex="-1"><a class="header-anchor" href="#_3-3-1-browserslist-浏览器兼容" aria-hidden="true">#</a> 3.3.1 browserslist 浏览器兼容</h4><p>在根目录下创建<code>.browserslistrc</code>文件，使得项目构建时能够根据设置的条件做浏览器兼容处理</p><p>例如：配置了预设<code>babel-preset-env</code>的<code>babel-loader</code>、配置了预设<code>postcss-preset-env</code>的<code>postcss-loader</code>，会根据<code>.broswerslistrc</code>文件中的条件做兼容编译</p><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token operator">%</span>   <span class="token comment">// 市场使用度超过1%的浏览器版本</span>
last <span class="token number">2</span> version   <span class="token comment">// 该浏览器最新的两个版本</span>
not dead   <span class="token comment">// 还未淘汰(两年之内有过更新)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐在<code>package.json</code>文件中配置<code>browserslist</code>字段，无需创建<code>.browserslistrc</code>文件</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;browserslist&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token string">&quot;&gt;1%&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;last 2 versions&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;not dead&quot;</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>补充：webpack 包下内置 browserslist 包，执行以下命令会输出打印要兼容的浏览器版本列表</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm browserslist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-3-2-postcss-样式兼容" tabindex="-1"><a class="header-anchor" href="#_3-3-2-postcss-样式兼容" aria-hidden="true">#</a> 3.3.2 postcss 样式兼容</h4><p><code>postcss</code>是利用 js 转换 css 样式的工具，根据配置的<code>browserslist</code>条件自动补充 css 属性前缀</p><p>安装</p><ul><li><code>postcss</code>包</li><li><code>autoprefixer</code>自动补充前缀插件（扩展 postcss-loader 功能的插件）</li><li><code>postcss-loader</code></li><li><code>postcss-preset-env</code>（postcss-loader 配置预设集）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i postcss postcss-loader postcss-preset-env autoprefixer <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span><span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">options</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">postcssOptions</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">// 配置postcss-loader选项</span>
          <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>
            <span class="token string">&#39;postcss-preset-env&#39;</span> <span class="token comment">// 简写</span>
            <span class="token comment">// require(&#39;autoprefixer&#39;), // 传入autoprefixer插件用于补充css属性前缀</span>
            <span class="token comment">// reuire(&#39;postcss-preset-env&#39;) // 预设包含了autoprefixer</span>
          <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// 注意：postcss-loader要在css-loader之前对css代码进行兼容处理,</span>
<span class="token comment">// 之后再把处理好的css文件传入给css-loader进行依赖处理，问题是</span>
<span class="token comment">// 在less、sass的loader配置中又得再CV一遍，冗余且耦合</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐在根目录下创建<code>postcss.config.js</code>文件，对 postcss-loader 进行全局配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;postcss-preset-env&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，在 use 里只需传入&#39;postcss-loader&#39;即可，无需再一个一个地重复配置</p><h4 id="_3-3-3-babel" tabindex="-1"><a class="header-anchor" href="#_3-3-3-babel" aria-hidden="true">#</a> 3.3.3 babel</h4><p>使用<code>@babel/preset-env</code>以及做<code>polyfill</code>填充即可</p><br><h3 id="_3-4-其他-loader" tabindex="-1"><a class="header-anchor" href="#_3-4-其他-loader" aria-hidden="true">#</a> 3.4 其他 loader</h3><h4 id="_3-4-1-import-loader" tabindex="-1"><a class="header-anchor" href="#_3-4-1-import-loader" aria-hidden="true">#</a> 3.4.1 import-loader</h4><p><code>import-loader</code>负责处理各模块之间的依赖关系，为什么需要这个 loader 呢？例如有一个<code>index.css</code>文件</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>// index.css
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">&#39;./common.css&#39;</span> #app</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>loader 顺序为<code>postcss =&gt; css =&gt; style</code>，在<code>postcss-loader</code>对<code>index.css</code>文件处理时并不能解析<code>@import &#39;./common.css&#39;</code>这个字段，所以只是处理了<code>index.css</code>里的 css 代码，然后到<code>css-loader</code>后可以解析<code>@import &#39;./common.css&#39;</code>将<code>./common.css</code>代码合并，最终结果是<code>postcss-loader</code>并未对<code>./common.css</code>进行处理，故需要在 postcss-loader 之前配置一个 import-loader 处理<code>@import</code>字段</p><p>配置如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span>
  <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">importLoaders</span><span class="token operator">:</span><span class="token number">1</span>
      <span class="token comment">// 当有@import时将导入的文件退回给上一个loader进行处理,具体数值看场景</span>
      <span class="token literal-property property">esModule</span><span class="token operator">:</span><span class="token boolean">false</span>
      <span class="token comment">// 解析background-img:url(&#39;xx.png&#39;)时，将url(&#39;..&#39;)作为esModule处理，</span>
      <span class="token comment">// 将其关闭避免引入路径出错bug，即不作为esMoudule处理</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token string">&#39;postcss-loader&#39;</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-2-file-loader" tabindex="-1"><a class="header-anchor" href="#_3-4-2-file-loader" aria-hidden="true">#</a> 3.4.2 file-loader</h4><p><code>file-loader</code>顾名思义就是文件资源的 loader</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./assets/imgs/flower.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> music <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./assets/medias/凤舞九天劲爆DJ.mp3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mp4 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./assets/medias/乡村爱情故事第三季1.mp4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|gif|svg|jpe?g|mp3|mp4)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;file-loader&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过配置<code>options</code>字段管理打包后的资源名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
<span class="token doc-comment comment">/**
 * [ext]：扩展名
 * [name]：文件名
 * [hash]：文件内容
 * [hash:&lt;length&gt;]：限制hash长度
*/</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|gif|svg|jpe?g|mp3|mp4)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span><span class="token string">&#39;file-loader&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">options</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;img/[name].[hash:7].[ext]&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-3-url-loader" tabindex="-1"><a class="header-anchor" href="#_3-4-3-url-loader" aria-hidden="true">#</a> 3.4.3 url-loader</h4><p>与<code>file-loader</code>功能类似，但是<code>url-loader</code>可以将文件资源路径转化成<code>base64</code>的形式，从而减少网络请求，而<code>file-loader</code>是将资源打包至指定目录下，分开请求</p><p>补充：base64 是将二进制文件以<code>data uri</code>字符串的形式来表示，也就是基于 64 个可打印字符来表示二进制数据，是网络上常用的用于传输 8Bit 字节码的编码方式</p><p><code>url-loader</code>内部也可以调用<code>file-loader</code>，最佳实践配置如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;img/[name].[hash:7].[ext]&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 小于25kb使用base64，否则调用file-loader</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-4-asset" tabindex="-1"><a class="header-anchor" href="#_3-4-4-asset" aria-hidden="true">#</a> 3.4.4 asset</h4><p><code>asset</code>是 webpack 内置的插件模块，可以替代 file-loader、url-loader、raw-loader 如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>asset <span class="token operator">/</span> resource<span class="token operator">--</span> <span class="token operator">&gt;</span> file <span class="token operator">-</span> loader<span class="token punctuation">;</span>
asset <span class="token operator">/</span> inline<span class="token operator">--</span> <span class="token operator">&gt;</span> url <span class="token operator">-</span> loader<span class="token punctuation">;</span>
asset <span class="token operator">/</span> source<span class="token operator">--</span> <span class="token operator">&gt;</span> raw <span class="token operator">-</span> loader<span class="token punctuation">;</span>
asset<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">assetModuleFilename</span><span class="token operator">:</span><span class="token string">&#39;img/[name].[hash:7][ext]&#39;</span> <span class="token comment">// 指定资源存放路径及名称</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|gif|svg|jpe?g|mp3|mp4)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;asset/resource&#39;</span> <span class="token comment">// 替代file-loader</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐这样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|gif|svg|jpe?g|mp3|mp4)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;asset/resource&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">generator</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">&quot;img/[name].[hash:7][ext]&quot;</span> <span class="token comment">// 指定资源存放路径及名称</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最佳实践</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
   <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|gif|svg|jpe?g|mp3|mp4)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
   <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;asset&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 设置type为asset</span>
   <span class="token literal-property property">generator</span><span class="token operator">:</span><span class="token punctuation">{</span>
     <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">&#39;img/[name].[hash:7][ext]&#39;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token literal-property property">parser</span><span class="token operator">:</span><span class="token punctuation">{</span>
     <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span><span class="token punctuation">{</span>
       <span class="token literal-property property">maxSize</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">*</span><span class="token number">1024</span> <span class="token comment">// 小于25kb使用base64解析为data uri</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-5-字体图标" tabindex="-1"><a class="header-anchor" href="#_3-4-5-字体图标" aria-hidden="true">#</a> 3.4.5 字体图标</h4><p>字体图标文件通常后缀名为<code>.ttf</code>、<code>.woff</code>，在 css 文件中通过<code>@font-face</code>的方式引入，例如</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">&#39;iconfont&#39;</span><span class="token punctuation">;</span>
    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;iconfont.ttf?t=15123458&#39;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;truetype&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;iconfont.woff?t=15123458&#39;</span><span class="token punctuation">)</span></span>
            <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;woff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;iconfont.woff2?t=15123458&#39;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;woff2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是前面提过<code>css-loader</code>处理<code>url</code>字段时把它当作 esModule 处理，此时需要指定对应的 loader，可以使用<code>asset/resource</code></p><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(ttf|woff2?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;asset/resource&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">generator</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">&#39;font/[name].[hash:7][ext]&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_4-plugin" tabindex="-1"><a class="header-anchor" href="#_4-plugin" aria-hidden="true">#</a> 4. Plugin</h2><p><code>plugin</code>可以在 webpack 工作的任意生命周期注入，从而做一些干预，类似生命周期钩子</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> LR
A<span class="token text string">(项目源码)</span> <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">plugins干预构建流程</span> <span class="token arrow operator">--&gt;</span></span>B<span class="token text string">(构建后的项目)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>plugins</code>数组字段中传入<code>插件实例</code>即可</p><h3 id="_4-1-clean-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#_4-1-clean-webpack-plugin" aria-hidden="true">#</a> 4.1 clean-webpack-plugin</h3><p><code>clean-webpack-plugin</code>可以在打包前自动删除打包后的目录，而无需每次手动删除</p><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i clean-webpack-plugin -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// 定义插件集合</span>
        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 传入插件实例</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-html-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#_4-2-html-webpack-plugin" aria-hidden="true">#</a> 4.2 html-webpack-plugin</h3><p><code>html-webpack-plugin</code>可以基于自己创建 html 模板在打包后的<code>dist</code>目录里动态添加<code>index.html</code></p><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlug</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">ititle</span><span class="token operator">:</span> <span class="token string">&#39;项目名&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 字段值会在打包时传入&lt;title&gt;&lt;/title&gt;</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./public/index.html&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 定义模板文件</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>public</code>目录下创建 html 模板文件<code>index.html</code>，例如 vue 的 html 模板</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 这里为ejx语法 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行打包构建命令<code>npm run build</code>,获得打包构建后的<code>./dist/index.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>项目名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>
            <span class="token attr-name">defer</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defer<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index.js<span class="token punctuation">&quot;</span></span>
        <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-defineplugin" tabindex="-1"><a class="header-anchor" href="#_4-3-defineplugin" aria-hidden="true">#</a> 4.3 DefinePlugin</h3><p><code>DefinePlugin</code>是 webpack 内置的用于定义常量的插件（无须 npm install 了），通过键值对的方式定义</p><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span> DefinePlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token constant">BASE_URL</span><span class="token operator">:</span> <span class="token string">&#39;&quot;./&quot;&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// 注意这里是一个坑，插件在编译时会原封不动地将&#39;...&#39;里的</span>
        <span class="token comment">// 东西赋值给BASE_URL这个变量，因此传入字符串需要为&#39;&quot;./&quot;&#39;</span>
        <span class="token comment">// 即 BASE_URL = &quot;./&quot;,若为对象则传入格式为&#39;{...}&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vue 默认的 html 模板为</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
            <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>&lt;%= BASE_URL %&gt;favicon.ico<span class="token punctuation">&quot;</span></span>
        <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时定义了 BASE_URL 这个常量，模板打包编译后的<code>./dist/index.html</code>为</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
            <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./favicon.ico<span class="token punctuation">&quot;</span></span>
        <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>项目名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>
            <span class="token attr-name">defer</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defer<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index.js<span class="token punctuation">&quot;</span></span>
        <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-copy-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#_4-4-copy-webpack-plugin" aria-hidden="true">#</a> 4.4 copy-webpack-plugin</h3><p><code>copy-webpack-plugin</code>是 webpack 内置的插件，可自动将静态资源目录拷贝进打包后的目录里</p><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;copy-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">patterns</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">&#39;public&#39;</span><span class="token punctuation">,</span>
                <span class="token comment">//to:path.resolve(__dirname,&#39;dist&#39;) // 推荐省略to字段，默认会找webpack定义的出口path</span>
                <span class="token literal-property property">globOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">ignore</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;**/index.html&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 忽略不需要copy的文件</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_5-搭建本地服务器-server" tabindex="-1"><a class="header-anchor" href="#_5-搭建本地服务器-server" aria-hidden="true">#</a> 5. 搭建本地服务器 server</h2><p>webpack 配置<code>watch</code>字段为 true，结合 vs-code 的<code>live server</code>服务器插件可以实现修改源码自动打包更新的效果，但是只修改一个地方，不能实现局部更新，wepack 要重新再将所有源码打包编译，这种频繁读写文件的操作性能极差</p><h3 id="_5-1-webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#_5-1-webpack-dev-server" aria-hidden="true">#</a> 5.1 webpack-dev-server</h3><p><code>webpack-dev-server</code>是 webpack 生态下的一个<code>live server</code>本地服务器，会将项目编译打包后存放在本地<code>虚拟内存</code>之中，默认为<code>localhost:8080</code>，即默认在本地服务器的 8080 端口</p><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i webpack-dev-server -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>package.json</code>文件中配置启动指令<code>webpack serve</code>即可</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span><span class="token string">&quot;webpack serve&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行以下命令，并访问 localhost:8080</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm run serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 webpack 配置文件中，对应 devServer 字段可配置服务器</p><h3 id="_5-2-webpack-dev-middleware" tabindex="-1"><a class="header-anchor" href="#_5-2-webpack-dev-middleware" aria-hidden="true">#</a> 5.2 webpack-dev-middleware</h3><p><code>webpack-dev-middleware</code>可以将 webpack 打包构建后的文件作为中间件传递给一个自定义的服务器</p><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i webpack-dev-middleware -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结合<code>express</code>开启服务器使用，在根目录下创建一个<code>serve.js</code>文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> webpackDevMiddleware <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-dev-middleware&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取配置文件</span>
<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译打包</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建server服务</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">webpackDevMiddleware</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 作为中间件传递</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">服务器运行在: localhost:3000</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行命令，开启服务后，访问<code>localhost:3000</code>即可</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node serve.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-3-hmr" tabindex="-1"><a class="header-anchor" href="#_5-3-hmr" aria-hidden="true">#</a> 5.3 HMR</h3><p><code>HMR</code>即 Hot Module Replacement，模块热更新，可以实现局部模块更新，其他的原封不动，极大地提升了构建性能。</p><p><code>HMR</code>是基于本地开发服务器实现的即<code>webpack-dev-server</code>，对于<code>webpack-dev-middleware</code>将项目打包作为中间件传递给其他服务器，要实现 HMR 的办法目前我还不知道</p><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在webpack.config.js文件下配置devServer字段即可</span>
<span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定热更新模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./src/a.js</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> fn <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// ./src/b.js</span>
<span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> fn2 <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// ./src/index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fn2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./b&#39;</span><span class="token punctuation">;</span>

<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果开启热更新</span>
    module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 热更新a.js文件，修改b.js则重新编译而非热更新(页面会重新刷新)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-path" tabindex="-1"><a class="header-anchor" href="#_5-4-path" aria-hidden="true">#</a> 5.4 path</h3><p><code>output</code>为出口路径配置，属性配置如下：</p><ul><li><code>path</code>: 打包目录</li><li><code>filename</code>: 出口文件名</li><li><code>publicPath</code>：index.html 内部引用路径= 域名+publicPath+filename</li><li><code>assetModuleFilename</code>: asset-loader 打包资源后存放地址及命名</li></ul><p>项目构建打包部署到服务器后，域名解析即为打包后的项目根目录(默认为 dist)</p><p><code>devServer</code>下的<code>publicPath</code>指定的是本地服务所在的目录，默认为<code>dist</code>上一级即源码根目录</p><p><code>resolve</code>定义 webpack 对路径的解析规则</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">resolve</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token literal-property property">extensions</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;.json&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;.ts&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;.vue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 识别扩展名</span>
  <span class="token literal-property property">alias</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;@&#39;</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span>src<span class="token punctuation">)</span> <span class="token comment">// 路径别名</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-proxy-代理配置" tabindex="-1"><a class="header-anchor" href="#_5-5-proxy-代理配置" aria-hidden="true">#</a> 5.5 Proxy 代理配置</h3><p>proxy 可以在开发阶段解决跨域问题，因为服务器与服务器之间不存在跨域的问题，proxy 核心思想就是基于 devServer 服务器作为客户端与接口服务器之间的代理转发，从而实现跨域，因为 devServer 与客户端是<code>同源</code>的</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> LR
A<span class="token text string">(客户端)</span> <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">Proxy</span> <span class="token arrow operator">--&gt;</span></span>B<span class="token text string">(服务器)</span> <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">Proxy</span> <span class="token arrow operator">--&gt;</span></span> A<span class="token text string">(客户端)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">devServer</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token literal-property property">hot</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启热更新</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment">// 项目部署于本地的3000端口</span>
  <span class="token literal-property property">proxy</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token literal-property property">target</span><span class="token operator">:</span><span class="token string">&#39;https://api.somewhere.com&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 用&#39;/api&#39;代理target</span>
       <span class="token comment">// 若访问/api/users会代理的是https://api.somewhere.com/api/user</span>
      <span class="token comment">// 而实际想要访问的是https://api.somewhere.com/users，那么需要重写覆盖</span>
      <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&#39;^/api&#39;</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">}</span>
      <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment">// 改变请求头里的host，设置为target同名的，以实现同源</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;/api2&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token literal-property property">target</span><span class="token operator">:</span><span class="token string">&#39;https://api.somewhere2.com&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-6-source-map" tabindex="-1"><a class="header-anchor" href="#_5-6-source-map" aria-hidden="true">#</a> 5.6 source-map</h3><p>source-map 即源码映射，使得开发时能直接定位到源码，方便调试</p><p>在 webpack 配置文件中定义<code>devtool</code>字段即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;source-map&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会在构建项目时生成<code>index.js.map</code>文件,是出口文件的一个 map 映射 <br></p><h3 id="_5-7-配置区分开发环境和生产环境" tabindex="-1"><a class="header-anchor" href="#_5-7-配置区分开发环境和生产环境" aria-hidden="true">#</a> 5.7 配置区分开发环境和生产环境</h3><p>配置<code>package.json</code>文件里的<code>script</code>字段</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code> <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --env prd&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;serve:dev&quot;</span><span class="token operator">:</span><span class="token string">&quot;webpack serve --env dev&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;serve:prd&quot;</span><span class="token operator">:</span><span class="token string">&quot;webpack serve --env prd&quot;</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后在执行脚本构建项目时，会将<code>prd</code>或者<code>dev</code>属性挂载到<code>prossess.env</code>对象上，可以在<code>webpack.config.js</code>文件中访问到<code>env</code>变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法1</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token literal-property property">prd</span><span class="token operator">:</span> isPrd<span class="token punctuation">,</span> <span class="token literal-property property">dev</span><span class="token operator">:</span> isDev <span class="token punctuation">}</span> <span class="token operator">=</span> prossess<span class="token punctuation">.</span>env<span class="token punctuation">;</span>

<span class="token comment">// 方法2</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">env</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token literal-property property">prd</span><span class="token operator">:</span> isPrd<span class="token punctuation">,</span> <span class="token literal-property property">dev</span><span class="token operator">:</span> isDev <span class="token punctuation">}</span> <span class="token operator">=</span> env<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 下面展示如何根据环境区分配置</span>
<span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-merge&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> defaultConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 默认配置</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> devConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开发环境配置</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> prdConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 生产环境配置</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">env</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token literal-property property">prd</span><span class="token operator">:</span> isPrd<span class="token punctuation">,</span> <span class="token literal-property property">dev</span><span class="token operator">:</span> isDev <span class="token punctuation">}</span> <span class="token operator">=</span> env<span class="token punctuation">;</span>
    <span class="token keyword">let</span> config<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isDev<span class="token punctuation">)</span> config <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>defaultConfig<span class="token punctuation">,</span> devConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrd<span class="token punctuation">)</span> config <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>defaultConfig<span class="token punctuation">,</span> prdConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-resolve" tabindex="-1"><a class="header-anchor" href="#_6-resolve" aria-hidden="true">#</a> 6. resolve</h2><p>该选项用于配置模块如何解析，即在执行<code>require(&#39;xx&#39;)</code>或者<code>import xx from &#39;xx&#39;</code>语句时会使用到该规则</p><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 路径别名</span>
    <span class="token literal-property property">Utilities</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/utilities/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Templates</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/templates/&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.json&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 文件拓展 优先级从左到右</span>
  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 默认为[&#39;node_modules&#39;],规定webpack解析模块时应该搜索的目录</span>
  <span class="token literal-property property">mainFields</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;browser&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;main&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 规定要解析模块目录下package.json文件中的哪个字段为模块路径</span>
<span class="token punctuation">}</span>

<span class="token comment">// loader解析去掉后缀</span>
<span class="token literal-property property">resolveLoader</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">moduleExtensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;-loader&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,222),o=[t];function c(l,i){return n(),a("div",null,o)}const u=s(p,[["render",c],["__file","webpackdajian.html.vue"]]);export{u as default};
