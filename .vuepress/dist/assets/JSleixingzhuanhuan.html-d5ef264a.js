import{_ as p,r as o,o as e,c,a as n,b as a,d as t,e as l}from"./app-3a979dd6.js";const i={},u=l(`<p><code>ToPrimitive</code>：数据类型转化为<code>原始值</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ToPrimitive</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将目标对象转换为指定类型原始值[[primitive]]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>primitive<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>primitive<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>primitive<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> Number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>primitive<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object.valueOf()通常返回自身</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>primitive<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// type未传入时优先valueOf()</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>primitive<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>primitive<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>toString</code>和<code>toNumber</code>：数据类型转化为<code>String</code> or <code>Number</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">toString</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">ToPrimitive</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toNumber</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">ToPrimitive</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> Number<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="操作" tabindex="-1"><a class="header-anchor" href="#操作" aria-hidden="true">#</a> +操作</h3><p>计算 <code>val1 + val2</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token keyword">typeof</span> <span class="token function">ToPrimitive</span><span class="token punctuation">(</span>val1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span>
    <span class="token keyword">typeof</span> <span class="token function">ToPrimitive</span><span class="token punctuation">(</span>val2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;string&#39;</span>
<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">toString</span><span class="token punctuation">(</span>val1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">toString</span><span class="token punctuation">(</span>val2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">toNumber</span><span class="token punctuation">(</span>val1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">toNumber</span><span class="token punctuation">(</span>val2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断" tabindex="-1"><a class="header-anchor" href="#判断" aria-hidden="true">#</a> ==判断</h3><p>判断 <code>x == y</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> typeX <span class="token operator">=</span> <span class="token keyword">typeof</span> x<span class="token punctuation">,</span>
    typeY <span class="token operator">=</span> <span class="token keyword">typeof</span> y<span class="token punctuation">;</span>

<span class="token comment">// 类型相同</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>typeX <span class="token operator">===</span> typeY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> x <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>typeX <span class="token operator">===</span> <span class="token string">&#39;String&#39;</span> <span class="token operator">||</span> typeX <span class="token operator">===</span> <span class="token string">&#39;Boolean&#39;</span> <span class="token operator">||</span> typeX <span class="token operator">===</span> <span class="token string">&#39;Object&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> x <span class="token operator">===</span> y<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>typeX <span class="token operator">===</span> <span class="token string">&#39;Number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 众所周知NaN不等于任何，包括自身</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token operator">+</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">===</span> <span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> x <span class="token operator">===</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 类型不同</span>
<span class="token comment">// 1.众所周知 null == undefined</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token comment">// 2.二者有一个为number，一个为string</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>typeX <span class="token operator">===</span> <span class="token string">&#39;Number&#39;</span> <span class="token operator">&amp;&amp;</span> typeY <span class="token operator">===</span> <span class="token string">&#39;String&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x <span class="token operator">==</span> <span class="token function">toNumber</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>typeX <span class="token operator">===</span> <span class="token string">&#39;String&#39;</span> <span class="token operator">&amp;&amp;</span> typeY <span class="token operator">===</span> <span class="token string">&#39;Number&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> y <span class="token operator">==</span> <span class="token function">toNumber</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3.二者有一个为boolean</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>typeX <span class="token operator">===</span> <span class="token string">&#39;Boolean&#39;</span><span class="token punctuation">)</span> <span class="token function">toNumber</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>typeY <span class="token operator">===</span> <span class="token string">&#39;Boolean&#39;</span><span class="token punctuation">)</span> <span class="token function">toNumber</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">;</span>

<span class="token comment">// 4.二者有一个为Object，另一个为number或string</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>typeX <span class="token operator">===</span> <span class="token string">&#39;Object&#39;</span><span class="token punctuation">)</span> <span class="token function">ToPrimitive</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>typeY <span class="token operator">===</span> <span class="token string">&#39;Object&#39;</span><span class="token punctuation">)</span> <span class="token function">ToPrimitive</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,11),r={href:"https://github.com/mqyqingfeng/Blog/issues/159",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/mqyqingfeng/Blog/issues/160",target:"_blank",rel:"noopener noreferrer"};function d(v,m){const s=o("ExternalLinkIcon");return e(),c("div",null,[u,n("p",null,[n("a",r,[a("1.JS 类型转换上"),t(s)])]),n("p",null,[n("a",k,[a("2.JS 类型转换下"),t(s)])])])}const y=p(i,[["render",d],["__file","JSleixingzhuanhuan.html.vue"]]);export{y as default};
